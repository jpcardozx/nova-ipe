// Simple Next.js configuration for Vercel deployment
const path = require('path');

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'cdn.sanity.io',
        pathname: '/images/**',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      },
    ],
  },
  experimental: {
    optimizeCss: true,
    largePageDataBytes: 512 * 1000,
  },
  webpack: (config, { isServer }) => {
    // Ensure basic configuration objects exist
    if (!config.resolve) config.resolve = {};
    if (!config.resolve.alias) config.resolve.alias = {};
    
    // Set up path aliases for imports
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.join(__dirname, './'),
      '@app': path.join(__dirname, './app'),
      '@components': path.join(__dirname, './app/components'),
      '@lib': path.join(__dirname, './lib'),
      '@src': path.join(__dirname, './src'),
      '@public': path.join(__dirname, './public'),
      '@sections': path.join(__dirname, './sections'),
      'app/sections': path.join(__dirname, './app/sections'),
      '@core': path.join(__dirname, './lib/core'),
      // Critical tailwind CSS paths
      'tailwindcss/preflight': path.join(__dirname, 'node_modules/tailwindcss/preflight.css'),
      'tailwindcss/theme.css': path.join(__dirname, 'node_modules/tailwindcss/theme.css'),
    };

    // Set up CSS processing
    if (config.module && config.module.rules) {
      // Find CSS rules
      const cssRules = config.module.rules.filter(rule => 
        rule.test && rule.test.toString().includes('.css')
      );
      
      // Configure CSS rules
      cssRules.forEach(cssRule => {
        // Handle oneOf rules (Next.js specific)
        if (cssRule.oneOf) {
          cssRule.oneOf.forEach(rule => {
            if (!rule.resolve) rule.resolve = {};
            if (!rule.resolve.alias) rule.resolve.alias = {};
            
            // Add critical tailwind CSS aliases
            rule.resolve.alias['tailwindcss/preflight'] = path.join(__dirname, 'node_modules/tailwindcss/preflight.css');
            rule.resolve.alias['tailwindcss/theme.css'] = path.join(__dirname, 'node_modules/tailwindcss/theme.css');
          });
        }
        
        // Handle direct use rules
        if (cssRule.use) {
          const useArray = Array.isArray(cssRule.use) ? cssRule.use : [cssRule.use];
          
          useArray.forEach(loader => {
            if (typeof loader === 'object' && loader.loader === 'css-loader') {
              loader.options = loader.options || {};
              if (!loader.options.importLoaders) loader.options.importLoaders = 1;
            }
          });
          
          // Add postcss-loader if not present
          if (!useArray.some(l =>
            (typeof l === 'object' && l.loader === 'postcss-loader') ||
            (typeof l === 'string' && l === 'postcss-loader')
          )) {
            cssRule.use.push({
              loader: 'postcss-loader',
              options: {
                postcssOptions: {
                  plugins: [
                    'tailwindcss',
                    'autoprefixer'
                  ]
                }
              }
            });
          }
        }
      });
    }
    
    // Disable Node.js polyfills
    config.resolve.fallback = { fs: false, path: false };
    
    return config;
  },
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production' ? { exclude: ['error', 'warn'] } : false,
  },
};

// Only add Sentry in production
if (process.env.NODE_ENV === 'production') {
  const { withSentryConfig } = require('@sentry/nextjs');
  module.exports = withSentryConfig(nextConfig, {
    silent: true,
    dryRun: false,
  });
} else {
  module.exports = nextConfig;
}
