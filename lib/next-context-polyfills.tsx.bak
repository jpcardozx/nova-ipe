'use client';

/**
 * Next.js 14 Context Polyfills
 * This file provides polyfills for internal Next.js contexts that may be missing during development
 * It helps fix issues like "Error: Invariant: Missing ActionQueueContext"
 */

import React, { createContext, useState, ReactNode, useContext } from 'react';

// Create interfaces for the context values
interface ActionQueueContextType {
    ping: () => void;
    invalidate: () => void;
    refresh: () => void;
    reset: () => void;
}

interface ServerInsertedHTMLContextType {
    mountedInstances: Set<any>;
    updateScripts?: (scripts: Set<any>) => void;
    updateStyles?: (styles: Set<any>) => void;
    updateHead?: (head: Set<any>) => void;
}

interface PathnameContextType {
    pathname: string;
    trailingSlash: boolean;
}

interface LayoutSegmentsContextType {
    parallelRoutes: Map<string, any>;
}

// Create empty contexts to replace missing Next.js contexts
export const ActionQueueContext = createContext<ActionQueueContextType>({
    // Default values to prevent "Missing ActionQueueContext" error
    ping: () => { },
    invalidate: () => { },
    refresh: () => { },
    reset: () => { },
});

export const ServerInsertedHTMLContext = createContext<ServerInsertedHTMLContextType>({
    // Default values to prevent missing context errors
    mountedInstances: new Set(),
});

export const PathnameContext = createContext<PathnameContextType>({
    pathname: '/',
    trailingSlash: false,
});

export const LayoutSegmentsContext = createContext<LayoutSegmentsContextType>({
    parallelRoutes: new Map(),
});

// Props interface for the provider
interface NextContextProviderProps {
    children: ReactNode;
}

// Wrapper component to provide all required Next.js contexts
export function NextContextProvider({ children }: NextContextProviderProps) {
    // Create minimal implementation of action queue
    const [state, setState] = useState({
        lastPing: 0,
    });    // Create values for all our context providers
    const actionQueueValue: ActionQueueContextType = {
        ping: () => setState(prev => ({ ...prev, lastPing: Date.now() })),
        invalidate: () => { },
        refresh: () => { },
        reset: () => { },
    };

    const serverInsertedHTMLValue: ServerInsertedHTMLContextType = {
        mountedInstances: new Set(),
    };

    const pathnameValue: PathnameContextType = {
        pathname: typeof window !== 'undefined' ? window.location.pathname : '/',
        trailingSlash: false,
    };

    const layoutSegmentsValue: LayoutSegmentsContextType = {
        parallelRoutes: new Map(),
    };

    // Wrap children in all necessary context providers
    return (
        <ActionQueueContext.Provider value={actionQueueValue}>
            <ServerInsertedHTMLContext.Provider value={serverInsertedHTMLValue}>
                <PathnameContext.Provider value={pathnameValue}>
                    <LayoutSegmentsContext.Provider value={layoutSegmentsValue}>
                        {children}
                    </LayoutSegmentsContext.Provider>
                </PathnameContext.Provider>
            </ServerInsertedHTMLContext.Provider>
        </ActionQueueContext.Provider>
    );
}

export default NextContextProvider;
