{
  "version": 3,
  "sources": ["../app/workers/service-worker.ts"],
  "sourcesContent": ["/// <reference lib=\"WebWorker\" />\r\n/// <reference lib=\"ES2020\" />\r\n/// <reference path=\"./sw-types.d.ts\" />\r\n\r\nexport { };\r\nconst SW_VERSION = '2.1.0';\r\nconst BUILD_TIME = Date.now();\r\nconst CACHE_VERSION = `v5-${BUILD_TIME}`;\r\nconst CHUNK_CACHE_NAME = `nova-ipe-chunk-cache-${CACHE_VERSION}`;\r\nconst OFFLINE_CACHE_NAME = `nova-ipe-offline-cache-${CACHE_VERSION}`;\r\nconst STATIC_CACHE_NAME = `nova-ipe-static-cache-${CACHE_VERSION}`;\r\nconst API_CACHE_NAME = `nova-ipe-api-cache-${CACHE_VERSION}`;\r\nconst IMAGE_CACHE_NAME = `nova-ipe-image-cache-${CACHE_VERSION}`;\r\n\r\n// Critical assets for immediate caching\r\nconst CRITICAL_ASSETS = [\r\n    '/_next/static/chunks/main-app.js',\r\n    '/_next/static/chunks/app/page.js',\r\n    '/_next/static/chunks/webpack.js',\r\n    '/offline',\r\n    '/404',\r\n    '/',\r\n    '/fonts/critical-icons.woff2',\r\n    '/images/logo.png',\r\n    '/manifest.webmanifest',\r\n];\r\n\r\n// Asset patterns with caching strategies\r\nconst PATTERNS = {\r\n    chunks: /\\/_next\\/static\\/chunks\\//,\r\n    static: /\\.(css|js|woff2|ico)$/,\r\n    image: /\\.(png|jpg|jpeg|svg|webp|gif|avif)$/,\r\n    api: /\\/api\\//,\r\n    sanity: /cdn\\.sanity\\.io/,\r\n    fonts: /\\.(woff2|woff|ttf|otf)$/\r\n};\r\n\r\n// Cache configuration\r\nconst CACHE_CONFIG: CacheConfigs = {\r\n    chunks: {\r\n        name: CHUNK_CACHE_NAME,\r\n        maxAge: 24 * 60 * 60 * 1000, // 24 hours\r\n        maxEntries: 300, // Aumentado para comportar mais chunks\r\n        priority: 'high' as const\r\n    },\r\n    image: {\r\n        name: IMAGE_CACHE_NAME,\r\n        maxAge: 30 * 24 * 60 * 60 * 1000, // 30 days\r\n        maxEntries: 100\r\n    },\r\n    static: {\r\n        name: STATIC_CACHE_NAME,\r\n        maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days\r\n        maxEntries: 200\r\n    },\r\n    api: {\r\n        name: API_CACHE_NAME,\r\n        maxAge: 60 * 60 * 1000, // 1 hour\r\n        maxEntries: 50\r\n    }\r\n};\r\n\r\n// --- Service Worker: Deeply Improved, TypeScript-Safe, and Robust ---\r\n\r\n// TypeScript: Use globalThis for service worker context\r\ndeclare const self: ServiceWorkerGlobalScope;\r\n\r\n// --- Install Event ---\r\nself.addEventListener('install', (event) => {\r\n    const swEvent = event as ExtendableEvent;\r\n    console.log('[Service Worker] Installing version', SW_VERSION);\r\n    swEvent.waitUntil(\r\n        Promise.all([\r\n            caches.open(CHUNK_CACHE_NAME).then(cache => {\r\n                console.log('[Service Worker] Precaching critical assets');\r\n                return cache.addAll(CRITICAL_ASSETS);\r\n            }),\r\n            caches.open(STATIC_CACHE_NAME),\r\n            caches.open(IMAGE_CACHE_NAME),\r\n            caches.open(API_CACHE_NAME),\r\n        ])\r\n            .then(() => self.skipWaiting())\r\n            .catch(error => {\r\n                console.error('[Service Worker] Precaching failed:', error);\r\n                return self.skipWaiting();\r\n            })\r\n    );\r\n});\r\n\r\n// --- Activate Event ---\r\nself.addEventListener('activate', (event) => {\r\n    const swEvent = event as ExtendableEvent;\r\n    console.log('[Service Worker] Activating version', SW_VERSION);\r\n    swEvent.waitUntil(\r\n        caches.keys().then(cacheNames => {\r\n            return Promise.all([\r\n                ...cacheNames.map(cacheName => {\r\n                    if (\r\n                        cacheName.startsWith('nova-ipe-') &&\r\n                        ![CHUNK_CACHE_NAME, STATIC_CACHE_NAME, IMAGE_CACHE_NAME, API_CACHE_NAME, OFFLINE_CACHE_NAME].includes(cacheName)\r\n                    ) {\r\n                        console.log('[Service Worker] Deleting old cache:', cacheName);\r\n                        return caches.delete(cacheName);\r\n                    }\r\n                }),\r\n                self.clients.claim(),\r\n            ]);\r\n        })\r\n    );\r\n});\r\n\r\n// Helper functions\r\nfunction shouldCache(response: Response | undefined): response is Response {\r\n    return response !== undefined && response.status === 200 && response.type === 'basic';\r\n}\r\n\r\nfunction getCacheConfig(request: Request): CacheConfig | null {\r\n    const url = new URL(request.url);\r\n\r\n    if (PATTERNS.image.test(url.pathname) || PATTERNS.sanity.test(url.hostname)) {\r\n        return CACHE_CONFIG.image;\r\n    }\r\n    if (PATTERNS.static.test(url.pathname)) {\r\n        return CACHE_CONFIG.static;\r\n    }\r\n    if (PATTERNS.api.test(url.pathname)) {\r\n        return CACHE_CONFIG.api;\r\n    }\r\n    if (PATTERNS.chunks.test(url.pathname)) {\r\n        return CACHE_CONFIG.chunks;\r\n    }\r\n    return null;\r\n}\r\n\r\nasync function cleanCache(cacheName: string, maxEntries: number, maxAge: number): Promise<void> {\r\n    const cache = await caches.open(cacheName);\r\n    const keys = await cache.keys();\r\n    const now = Date.now();\r\n\r\n    for (const request of keys) {\r\n        const response = await cache.match(request);\r\n        if (!response) continue;\r\n\r\n        const date = response.headers.get('date');\r\n        if (date) {\r\n            const cacheTime = new Date(date).getTime();\r\n            if (now - cacheTime > maxAge) {\r\n                await cache.delete(request);\r\n            }\r\n        }\r\n    }\r\n\r\n    // If we still have too many entries, remove the oldest ones\r\n    if (keys.length > maxEntries) {\r\n        const entriesToRemove = keys.length - maxEntries;\r\n        for (let i = 0; i < entriesToRemove; i++) {\r\n            await cache.delete(keys[i]);\r\n        }\r\n    }\r\n}\r\n\r\n// --- Fetch Event ---\r\nself.addEventListener('fetch', (event) => {\r\n    const swEvent = event as FetchEvent;\r\n    const { request } = swEvent;\r\n\r\n    // Ignorar m\u00E9todos n\u00E3o-GET\r\n    if (request.method !== 'GET') return;\r\n\r\n    // Verificar se \u00E9 um chunk din\u00E2mico\r\n    const isChunk = PATTERNS.chunks.test(request.url);\r\n    if (isChunk) {\r\n        swEvent.respondWith(\r\n            (async () => {\r\n                try {\r\n                    const cache = await caches.open(CHUNK_CACHE_NAME);\r\n                    const cachedResponse = await cache.match(request);\r\n\r\n                    if (cachedResponse) {\r\n                        // Background revalidation\r\n                        fetch(request)\r\n                            .then(networkResponse => {\r\n                                if (shouldCache(networkResponse)) {\r\n                                    void cache.put(request, networkResponse.clone());\r\n                                }\r\n                            })\r\n                            .catch(() => { /* Silent fail on revalidation */ });\r\n\r\n                        return cachedResponse;\r\n                    }\r\n\r\n                    const networkResponse = await fetch(request);\r\n                    if (shouldCache(networkResponse)) {\r\n                        await cache.put(request, networkResponse.clone());\r\n                    }\r\n                    return networkResponse;\r\n                } catch (error) {\r\n                    const cache = await caches.open(CHUNK_CACHE_NAME);\r\n                    const lastCachedResponse = await cache.match(request);\r\n                    if (lastCachedResponse) return lastCachedResponse;\r\n                    return new Response('', { status: 503 });\r\n                }\r\n            })()\r\n        );\r\n        return;\r\n    }\r\n\r\n    // Handle other resources with normal caching\r\n    const cacheConfig = getCacheConfig(request);\r\n    if (request.url.includes('/_next/static/chunks/') || CRITICAL_ASSETS.includes(request.url)) {\r\n        swEvent.respondWith(\r\n            caches.match(request).then(cachedResponse => {\r\n                const fetchPromise = fetch(request).then(networkResponse => {\r\n                    if (shouldCache(networkResponse)) {\r\n                        const clone = networkResponse.clone();\r\n                        void caches.open(CHUNK_CACHE_NAME).then(cache => void cache.put(request, clone));\r\n                    }\r\n                    return networkResponse;\r\n                });\r\n                return cachedResponse || fetchPromise;\r\n            })\r\n        );\r\n    } else if (cacheConfig) {\r\n        swEvent.respondWith(\r\n            caches.open(cacheConfig.name).then(async cache => {\r\n                const cachedResponse = await cache.match(request);\r\n                const fetchPromise = fetch(request)\r\n                    .then(networkResponse => {\r\n                        if (shouldCache(networkResponse)) {\r\n                            const clone = networkResponse.clone();\r\n                            void cache.put(request, clone).then(() =>\r\n                                void cleanCache(cacheConfig.name, cacheConfig.maxEntries, cacheConfig.maxAge)\r\n                            );\r\n                        }\r\n                        return networkResponse;\r\n                    })\r\n                    .catch(() => {\r\n                        if (cachedResponse) return cachedResponse;\r\n                        throw new Error('No cached response available');\r\n                    });\r\n                return cachedResponse || fetchPromise;\r\n            })\r\n        );\r\n    } else {\r\n        swEvent.respondWith(\r\n            (async () => {\r\n                try {\r\n                    const response = await Promise.race<Response | undefined>([\r\n                        fetch(request).catch(() => undefined),\r\n                        new Promise<Response | undefined>((resolve) => {\r\n                            setTimeout(async () => {\r\n                                const cacheResponse = await caches.match(request);\r\n                                resolve(cacheResponse || undefined);\r\n                            }, 3000);\r\n                        })\r\n                    ]);\r\n\r\n                    if (response) return response;\r\n                    const cacheResponse = await caches.match(request);\r\n                    if (cacheResponse) return cacheResponse;\r\n                    return new Response('', { status: 503 });\r\n                } catch {\r\n                    return new Response('', { status: 503 });\r\n                }\r\n            })()\r\n        );\r\n    }\r\n});\r\n"],
  "mappings": "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",
  "names": ["SW_VERSION", "BUILD_TIME", "CACHE_VERSION", "CHUNK_CACHE_NAME", "OFFLINE_CACHE_NAME", "STATIC_CACHE_NAME", "API_CACHE_NAME", "IMAGE_CACHE_NAME", "CRITICAL_ASSETS", "PATTERNS", "CACHE_CONFIG", "event", "swEvent", "cache", "error", "cacheNames", "cacheName", "shouldCache", "response", "getCacheConfig", "request", "url", "cleanCache", "maxEntries", "maxAge", "keys", "now", "date", "cacheTime", "entriesToRemove", "i", "cachedResponse", "networkResponse", "lastCachedResponse", "cacheConfig", "fetchPromise", "clone", "resolve", "cacheResponse", "e"]
}
