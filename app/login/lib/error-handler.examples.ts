/**
 * üß™ Exemplo de Uso - Error Handling System
 * 
 * Este arquivo demonstra como o sistema funciona na pr√°tica
 */

import { 
  buildErrorDetails, 
  generateErrorMetrics, 
  errorLogger,
  ErrorCategory 
} from '../lib/error-handler'

// ============================================================================
// EXEMPLO 1: Credenciais Inv√°lidas
// ============================================================================

function exemploCredenciaisInvalidas() {
  const startTime = Date.now()
  const attemptNumber = 1
  
  try {
    // Simular erro do Supabase
    throw new Error('Invalid login credentials')
  } catch (error) {
    const duration = Date.now() - startTime
    
    // Sistema categoriza automaticamente como AUTH_INVALID_CREDENTIALS
    const errorDetails = buildErrorDetails(error, {
      loginMode: 'dashboard',
      email: 'user@example.com',
      attemptNumber: 1,
    })
    
    const metrics = generateErrorMetrics(
      errorDetails,
      attemptNumber,
      duration,
      'user@example.com',
      'dashboard'
    )
    
    // Log estruturado no console
    errorLogger.logError(errorDetails, metrics)
    
    /* 
    Console Output:
    
    üö® LOGIN ERROR [ERR_1729180800000_abc123]
    ‚îú‚îÄ üìä Metrics
    ‚îÇ  ‚îú‚îÄ category: AUTH_INVALID_CREDENTIALS
    ‚îÇ  ‚îú‚îÄ timestamp: 17/10/2025 14:30:00
    ‚îÇ  ‚îú‚îÄ duration: 234ms
    ‚îÇ  ‚îú‚îÄ attempt: 1
    ‚îÇ  ‚îî‚îÄ mode: dashboard
    ‚îÇ
    ‚îú‚îÄ üìù Details
    ‚îÇ  ‚îú‚îÄ title: Credenciais Inv√°lidas
    ‚îÇ  ‚îú‚îÄ message: O email ou senha fornecidos est√£o incorretos...
    ‚îÇ  ‚îú‚îÄ canRetry: true
    ‚îÇ  ‚îî‚îÄ retryDelay: N/A
    ‚îÇ
    ‚îî‚îÄ ‚ö†Ô∏è Environment Issues
       ‚îî‚îÄ (nenhum detectado)
    */
    
    // Exibir para o usu√°rio
    console.log('Mostrar para usu√°rio:', {
      title: errorDetails.title,
      message: errorDetails.message,
      technical: `[${metrics.errorId}] ${errorDetails.category}`,
    })
  }
}

// ============================================================================
// EXEMPLO 2: Rate Limit
// ============================================================================

function exemploRateLimit() {
  const startTime = Date.now()
  const attemptNumber = 5 // 5¬™ tentativa
  
  try {
    throw new Error('Email rate limit exceeded')
  } catch (error) {
    const duration = Date.now() - startTime
    
    // Sistema categoriza automaticamente como AUTH_RATE_LIMIT
    const errorDetails = buildErrorDetails(error, {
      loginMode: 'dashboard',
      email: 'user@example.com',
      attemptNumber,
    })
    
    const metrics = generateErrorMetrics(
      errorDetails,
      attemptNumber,
      duration,
      'user@example.com',
      'dashboard'
    )
    
    errorLogger.logError(errorDetails, metrics)
    
    // Verificar se pode retry e quando
    console.log('Can Retry:', errorDetails.canRetry) // true
    console.log('Retry Delay:', errorDetails.retryDelay) // 300 (5 minutos)
    
    // Exibir para o usu√°rio com countdown
    console.log('Bloqueado por:', errorDetails.retryDelay, 'segundos')
  }
}

// ============================================================================
// EXEMPLO 3: Network Error com Issues Detectados
// ============================================================================

function exemploNetworkError() {
  const startTime = Date.now()
  const attemptNumber = 1
  
  // Simular offline
  Object.defineProperty(navigator, 'onLine', {
    writable: true,
    value: false
  })
  
  try {
    throw new Error('Failed to fetch')
  } catch (error) {
    const duration = Date.now() - startTime
    
    const errorDetails = buildErrorDetails(error, {
      loginMode: 'dashboard',
      email: 'user@example.com',
      attemptNumber,
    })
    
    const metrics = generateErrorMetrics(
      errorDetails,
      attemptNumber,
      duration,
      'user@example.com',
      'dashboard'
    )
    
    errorLogger.logError(errorDetails, metrics)
    
    // Environment issues detectados automaticamente
    console.log('Issues:', metrics.environmentIssues)
    // ["‚ùå Usu√°rio offline - sem conex√£o com internet"]
    
    // Sistema j√° sabe que o problema √© de rede
    console.log('Category:', errorDetails.category) // NETWORK_OFFLINE
  }
}

// ============================================================================
// EXEMPLO 4: Obter Estat√≠sticas
// ============================================================================

function exemploEstatisticas() {
  // Simular v√°rios erros
  exemploCredenciaisInvalidas()
  exemploCredenciaisInvalidas()
  exemploRateLimit()
  exemploNetworkError()
  
  // Obter estat√≠sticas
  const stats = errorLogger.getStats()
  
  console.log('Total de erros:', stats.total) // 4
  console.log('Por categoria:', stats.byCategory)
  /*
  {
    AUTH_INVALID_CREDENTIALS: 2,
    AUTH_RATE_LIMIT: 1,
    NETWORK_OFFLINE: 1
  }
  */
  
  // √öltimo erro
  console.log('√öltimo erro:', stats.lastError)
  
  // Hist√≥rico completo
  const history = errorLogger.getErrorHistory()
  console.log('Hist√≥rico:', history.length, 'erros')
  
  // Limpar hist√≥rico
  errorLogger.clearHistory()
}

// ============================================================================
// EXEMPLO 5: Debug Mode
// ============================================================================

function exemploDebugMode() {
  // Ativar debug mode
  errorLogger.setDebugMode(true)
  
  // Agora os logs incluir√£o:
  // - Stack trace completo
  // - Original error object
  // - Environment snapshot detalhado
  // - Timing information
  
  try {
    throw new Error('Test error')
  } catch (error) {
    const errorDetails = buildErrorDetails(error)
    const metrics = generateErrorMetrics(errorDetails, 1, 100)
    
    // Log com MUITO mais detalhes
    errorLogger.logError(errorDetails, metrics)
  }
  
  // Desativar debug mode
  errorLogger.setDebugMode(false)
}

// ============================================================================
// EXEMPLO 6: Export Debug Data
// ============================================================================

function exemploExportDebugData() {
  // Simular alguns erros
  exemploCredenciaisInvalidas()
  exemploRateLimit()
  
  // Obter dados completos
  const stats = errorLogger.getStats()
  const history = errorLogger.getErrorHistory()
  
  const debugData = {
    timestamp: new Date().toISOString(),
    stats,
    history,
    sessionInfo: {
      userAgent: navigator.userAgent,
      platform: navigator.platform,
      language: navigator.language,
    }
  }
  
  // Exportar como JSON
  const json = JSON.stringify(debugData, null, 2)
  console.log('Debug Data:', json)
  
  // Em produ√ß√£o, voc√™ pode fazer download:
  // const blob = new Blob([json], { type: 'application/json' })
  // const url = URL.createObjectURL(blob)
  // const a = document.createElement('a')
  // a.href = url
  // a.download = `login-debug-${Date.now()}.json`
  // a.click()
}

// ============================================================================
// EXEMPLO 7: Integra√ß√£o no Componente React
// ============================================================================

function exemploComponenteReact() {
  const codigo = `
import { 
  buildErrorDetails, 
  generateErrorMetrics, 
  errorLogger 
} from './lib/error-handler'

function LoginForm() {
  const [startTime, setStartTime] = useState(0)
  const [attemptNumber, setAttemptNumber] = useState(0)
  
  const handleSubmit = async (data) => {
    const loginStartTime = Date.now()
    setStartTime(loginStartTime)
    setAttemptNumber(prev => prev + 1)
    
    try {
      await login(data.email, data.password)
      // Sucesso!
    } catch (error) {
      // ‚úÖ Sistema completo de error handling
      const duration = Date.now() - loginStartTime
      
      const errorDetails = buildErrorDetails(error, {
        loginMode: 'dashboard',
        email: data.email,
        attemptNumber: attemptNumber + 1,
      })
      
      const metrics = generateErrorMetrics(
        errorDetails,
        attemptNumber + 1,
        duration,
        data.email,
        'dashboard'
      )
      
      // Log estruturado
      errorLogger.logError(errorDetails, metrics)
      
      // Exibir para o usu√°rio
      setError({
        title: errorDetails.title,
        message: errorDetails.message,
        technical: \`[\${metrics.errorId}] \${errorDetails.category}\`
      })
    }
  }
  
  // ... resto do componente
}
  `
  
  console.log('C√≥digo de exemplo:', codigo)
}

// ============================================================================
// EXECUTAR EXEMPLOS
// ============================================================================

export function runExamples() {
  console.log('üß™ Executando Exemplos de Error Handling\n')
  
  console.log('1Ô∏è‚É£ Credenciais Inv√°lidas')
  exemploCredenciaisInvalidas()
  
  console.log('\n2Ô∏è‚É£ Rate Limit')
  exemploRateLimit()
  
  console.log('\n3Ô∏è‚É£ Network Error')
  exemploNetworkError()
  
  console.log('\n4Ô∏è‚É£ Estat√≠sticas')
  exemploEstatisticas()
  
  console.log('\n5Ô∏è‚É£ Debug Mode')
  exemploDebugMode()
  
  console.log('\n6Ô∏è‚É£ Export Debug Data')
  exemploExportDebugData()
  
  console.log('\n7Ô∏è‚É£ Integra√ß√£o React')
  exemploComponenteReact()
}

// Para executar no console:
// import { runExamples } from './examples'
// runExamples()
