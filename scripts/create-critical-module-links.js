/**
 * Script para criar links simb√≥licos de m√≥dulos cr√≠ticos no ambiente da Vercel
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîó Criando links para m√≥dulos cr√≠ticos...');

// Lista de m√≥dulos cr√≠ticos
const criticalModules = [
    'autoprefixer',
    'tailwindcss',
    'postcss'
];

// Caminhos principais
const nodeModulesPath = path.join(process.cwd(), 'node_modules');
const nextModulesPath = path.join(nodeModulesPath, 'next', 'node_modules');

// Criar diret√≥rio de node_modules se n√£o existir
if (!fs.existsSync(nodeModulesPath)) {
    fs.mkdirSync(nodeModulesPath, { recursive: true });
}

// Criar diret√≥rio de next/node_modules se n√£o existir
if (!fs.existsSync(nextModulesPath)) {
    fs.mkdirSync(nextModulesPath, { recursive: true });
}

// Fun√ß√£o para verificar se um m√≥dulo existe
function checkModuleExists(moduleName, basePath) {
    try {
        const modulePath = path.join(basePath, moduleName);
        return fs.existsSync(modulePath) && fs.statSync(modulePath).isDirectory();
    } catch (error) {
        return false;
    }
}

// Fun√ß√£o para copiar um diret√≥rio recursivamente
function copyDir(src, dest) {
    // Criar o diret√≥rio de destino se n√£o existir
    if (!fs.existsSync(dest)) {
        fs.mkdirSync(dest, { recursive: true });
    }

    // Ler arquivos no diret√≥rio de origem
    const entries = fs.readdirSync(src, { withFileTypes: true });

    for (const entry of entries) {
        const srcPath = path.join(src, entry.name);
        const destPath = path.join(dest, entry.name);

        // Se for um diret√≥rio, copiar recursivamente
        if (entry.isDirectory()) {
            copyDir(srcPath, destPath);
        } else {
            // Se for um arquivo, copiar diretamente
            fs.copyFileSync(srcPath, destPath);
        }
    }
}

// Tentar instalar m√≥dulos globalmente
function installGlobalModules() {
    try {
        console.log('üì¶ Instalando m√≥dulos cr√≠ticos globalmente...');
        execSync(`npm install -g ${criticalModules.join(' ')}`, { stdio: 'inherit' });
        return true;
    } catch (error) {
        console.error('‚ùå Falha ao instalar m√≥dulos globalmente:', error.message);
        return false;
    }
}

// Instalar globalmente antes para garantir
installGlobalModules();

// Fun√ß√£o para obter o caminho do m√≥dulo global
function getGlobalModulePath(moduleName) {
    try {
        // Tentar encontrar via npm root global
        const globalPath = execSync('npm root -g').toString().trim();
        const moduleGlobalPath = path.join(globalPath, moduleName);

        if (fs.existsSync(moduleGlobalPath)) {
            return moduleGlobalPath;
        }

        // Tentar caminhos espec√≠ficos para o ambiente Vercel
        const vercelPaths = [
            '/node22/lib/node_modules',
            '/lib/node_modules',
            '/usr/local/lib/node_modules'
        ];

        for (const vercelPath of vercelPaths) {
            const modulePath = path.join(vercelPath, moduleName);
            if (fs.existsSync(modulePath)) {
                return modulePath;
            }
        }

        return null;
    } catch (error) {
        console.error(`‚ùå Erro ao procurar m√≥dulo global ${moduleName}:`, error.message);
        return null;
    }
}

// Processar cada m√≥dulo
for (const moduleName of criticalModules) {
    console.log(`üîÑ Processando ${moduleName}...`);

    // Verificar se o m√≥dulo j√° existe no node_modules principal
    if (checkModuleExists(moduleName, nodeModulesPath)) {
        console.log(`‚úÖ ${moduleName} j√° existe no diret√≥rio node_modules principal`);

        // Copiar para next/node_modules tamb√©m
        if (!checkModuleExists(moduleName, nextModulesPath)) {
            try {
                console.log(`üîÑ Copiando ${moduleName} para next/node_modules...`);
                copyDir(
                    path.join(nodeModulesPath, moduleName),
                    path.join(nextModulesPath, moduleName)
                );
                console.log(`‚úÖ ${moduleName} copiado para next/node_modules`);
            } catch (error) {
                console.error(`‚ùå Erro ao copiar ${moduleName} para next/node_modules:`, error.message);
            }
        }

        continue;
    }

    // Tentar encontrar o m√≥dulo global
    const globalModulePath = getGlobalModulePath(moduleName);

    if (globalModulePath) {
        console.log(`üîç Encontrado ${moduleName} em ${globalModulePath}`);

        try {
            // Copiar para node_modules
            console.log(`üîÑ Copiando ${moduleName} de ${globalModulePath} para node_modules...`);
            copyDir(
                globalModulePath,
                path.join(nodeModulesPath, moduleName)
            );
            console.log(`‚úÖ ${moduleName} copiado para node_modules`);

            // Copiar para next/node_modules tamb√©m
            copyDir(
                globalModulePath,
                path.join(nextModulesPath, moduleName)
            );
            console.log(`‚úÖ ${moduleName} copiado para next/node_modules`);

        } catch (error) {
            console.error(`‚ùå Erro ao copiar ${moduleName} de ${globalModulePath}:`, error.message);
        }
    } else {
        console.log(`‚ö†Ô∏è ${moduleName} n√£o encontrado globalmente, criando vers√£o m√≠nima...`);

        // Criar implementa√ß√£o m√≠nima
        if (moduleName === 'autoprefixer') {
            const autoprefixerDir = path.join(nodeModulesPath, moduleName);
            fs.mkdirSync(autoprefixerDir, { recursive: true });

            // Criar package.json
            const packageJson = {
                "name": "autoprefixer",
                "version": "10.4.16",
                "main": "lib/autoprefixer.js",
                "license": "MIT"
            };

            fs.writeFileSync(
                path.join(autoprefixerDir, 'package.json'),
                JSON.stringify(packageJson, null, 2)
            );

            // Criar lib diret√≥rio
            const libDir = path.join(autoprefixerDir, 'lib');
            fs.mkdirSync(libDir, { recursive: true });

            // Criar arquivo principal
            const autoprefixerJs = `
'use strict';

// Implementa√ß√£o minimalista do autoprefixer
function autoprefixer(opts) {
  return {
    postcssPlugin: 'autoprefixer',
    Once(root) { return root; },
    info() { return { browsers: [] }; }
  };
}

autoprefixer.postcss = true;
module.exports = autoprefixer;
`;

            fs.writeFileSync(path.join(libDir, 'autoprefixer.js'), autoprefixerJs);

            // Criar index.js
            fs.writeFileSync(
                path.join(autoprefixerDir, 'index.js'),
                "module.exports = require('./lib/autoprefixer');"
            );

            console.log(`‚úÖ Implementa√ß√£o m√≠nima de ${moduleName} criada com sucesso`);

            // Copiar para next/node_modules tamb√©m
            copyDir(
                autoprefixerDir,
                path.join(nextModulesPath, moduleName)
            );
            console.log(`‚úÖ ${moduleName} copiado para next/node_modules`);
        }
    }
}

console.log('üéâ Processo de cria√ß√£o de links conclu√≠do!');
