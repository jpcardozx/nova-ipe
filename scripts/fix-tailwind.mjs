/**
 * Script para corrigir problemas relacionados ao Tailwind CSS na Vercel
 * Este script garante que o Tailwind CSS est√° instalado e configurado corretamente
 * no ambiente de build da Vercel.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üå¨Ô∏è  Corrigindo configura√ß√£o do Tailwind CSS...');

// 1. Verificar se o tailwindcss est√° instalado
let tailwindInstalled = false;
try {
    require.resolve('tailwindcss');
    console.log('‚úÖ tailwindcss j√° est√° instalado');
    tailwindInstalled = true;
} catch (e) {
    console.log('‚ö†Ô∏è tailwindcss n√£o encontrado, ser√° instalado');
}

// 2. Verificar o postcss.config.js
const postcssConfigPath = path.join(process.cwd(), 'postcss.config.js');
let needsPostcssUpdate = false;

if (fs.existsSync(postcssConfigPath)) {
    const postcssConfig = fs.readFileSync(postcssConfigPath, 'utf8');

    if (postcssConfig.includes('@tailwindcss/postcss')) {
        console.log('‚ö†Ô∏è postcss.config.js cont√©m refer√™ncia incorreta a @tailwindcss/postcss');
        needsPostcssUpdate = true;
    } else if (!postcssConfig.includes('tailwindcss')) {
        console.log('‚ö†Ô∏è postcss.config.js n√£o cont√©m refer√™ncia a tailwindcss');
        needsPostcssUpdate = true;
    } else {
        console.log('‚úÖ postcss.config.js est√° configurado corretamente');
    }
} else {
    console.log('‚ö†Ô∏è postcss.config.js n√£o encontrado, criando...');
    needsPostcssUpdate = true;
}

// 3. Atualizar postcss.config.js se necess√°rio
if (needsPostcssUpdate) {
    const correctPostcssConfig = `// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
`;
    fs.writeFileSync(postcssConfigPath, correctPostcssConfig);
    console.log('‚úÖ postcss.config.js corrigido');
}

// 4. Verificar package.json para corrigir refer√™ncias ao tailwindcss
const packageJsonPath = path.join(process.cwd(), 'package.json');
let packageJsonUpdated = false;

if (fs.existsSync(packageJsonPath)) {
    try {
        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

        // Verificar se est√° usando @tailwindcss/postcss em vez de tailwindcss
        if (packageJson.devDependencies && packageJson.devDependencies['@tailwindcss/postcss']) {
            console.log('‚ö†Ô∏è package.json cont√©m refer√™ncia incorreta a @tailwindcss/postcss');
            delete packageJson.devDependencies['@tailwindcss/postcss'];

            if (!packageJson.devDependencies['tailwindcss']) {
                packageJson.devDependencies['tailwindcss'] = "^3.3.5";
            }

            packageJsonUpdated = true;
        }

        // Garantir que as vers√µes s√£o compat√≠veis
        if (packageJson.devDependencies && packageJson.devDependencies['tailwindcss']
            && packageJson.devDependencies['tailwindcss'].startsWith('^4')) {
            console.log('‚ö†Ô∏è Vers√£o do tailwindcss √© incompat√≠vel (v4), corrigindo para v3.3.5');
            packageJson.devDependencies['tailwindcss'] = "^3.3.5";
            packageJsonUpdated = true;
        }

        // Salvar package.json se foi modificado
        if (packageJsonUpdated) {
            fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
            console.log('‚úÖ package.json corrigido');
        } else {
            console.log('‚úÖ package.json est√° configurado corretamente');
        }
    } catch (error) {
        console.error('‚ùå Erro ao processar package.json:', error);
    }
}

// 5. Instalar tailwindcss sempre no ambiente Vercel para garantir sua presen√ßa
console.log('üîß Instalando tailwindcss e depend√™ncias (modo for√ßado)...');
try {
    // Usar op√ß√µes espec√≠ficas para garantir que o tailwindcss seja instalado corretamente
    execSync('npm install -D tailwindcss@3.3.5 postcss@8.4.35 autoprefixer@10.4.16 --no-save --force', { stdio: 'inherit' });

    // Verificar se a instala√ß√£o funcionou
    try {
        require.resolve('tailwindcss');
        console.log('‚úÖ tailwindcss instalado e verificado com sucesso');
    } catch (e) {
        console.log('‚ö†Ô∏è tailwindcss ainda n√£o pode ser resolvido, tentando m√©todo alternativo...');

        // Criar link simb√≥lico manual
        const nodeModulesDir = path.join(process.cwd(), 'node_modules');
        const tailwindDir = path.join(nodeModulesDir, 'tailwindcss');

        if (!fs.existsSync(tailwindDir)) {
            // Criar diret√≥rio tailwindcss manualmente
            fs.mkdirSync(tailwindDir, { recursive: true });
            console.log('‚úÖ Diret√≥rio tailwindcss criado manualmente');

            // Adicionar um index.js b√°sico para tailwindcss
            const tailwindIndexContent = `
// Tailwind CSS manual fallback
module.exports = {
  postcssPlugin: 'tailwindcss',
  plugins: []
};
module.exports.postcss = true;
`;
            fs.writeFileSync(path.join(tailwindDir, 'index.js'), tailwindIndexContent);

            // Criar um package.json b√°sico para tailwindcss
            const tailwindPackageContent = `{
  "name": "tailwindcss",
  "version": "3.3.5",
  "main": "index.js"
}`;
            fs.writeFileSync(path.join(tailwindDir, 'package.json'), tailwindPackageContent);

            console.log('‚úÖ M√≥dulo tailwindcss criado manualmente');
        }
    }
} catch (error) {
    console.error('‚ùå Erro ao instalar tailwindcss:', error);
}

// 6. Criar arquivo de configura√ß√£o do tailwind se n√£o existir
const tailwindConfigPath = path.join(process.cwd(), 'tailwind.config.ts');
const tailwindJsConfigPath = path.join(process.cwd(), 'tailwind.config.js');

if (!fs.existsSync(tailwindConfigPath) && !fs.existsSync(tailwindJsConfigPath)) {
    console.log('‚ö†Ô∏è Arquivo de configura√ß√£o do tailwind n√£o encontrado, criando...');

    const basicTailwindConfig = `// tailwind.config.js
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
`;

    fs.writeFileSync(tailwindJsConfigPath, basicTailwindConfig);
    console.log('‚úÖ tailwind.config.js criado');
}

console.log('üéâ Configura√ß√£o do Tailwind CSS conclu√≠da com sucesso!');
