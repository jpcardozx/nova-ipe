/**
 * Script para testar a funcionalidade de login com Supabase
 */

const { createClient } = require('@supabase/supabase-js');

// Load environment variables
require('dotenv').config({ path: '.env.local' });
require('dotenv').config({ path: '.env' });

async function testLogin() {
  console.log('üîê Testando funcionalidade de login...\n');

  // Check environment variables
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

  if (!supabaseUrl || !supabaseKey) {
    console.log('‚ùå Vari√°veis de ambiente n√£o encontradas!');
    return false;
  }

  console.log('‚úÖ Vari√°veis de ambiente configuradas');
  console.log(`   URL: ${supabaseUrl}`);
  console.log(`   Key: ${supabaseKey.substring(0, 20)}...`);

  // Create Supabase client
  const supabase = createClient(supabaseUrl, supabaseKey);

  // Test 1: Check tables exist
  console.log('\nüóÑÔ∏è  Verificando tabelas necess√°rias...');
  
  const requiredTables = ['access_requests', 'login_attempts'];
  let tablesOk = true;

  for (const table of requiredTables) {
    try {
      const { error } = await supabase.from(table).select('*', { count: 'exact', head: true });
      
      if (error && error.code === '42P01') {
        console.log(`‚ùå Tabela "${table}" n√£o existe`);
        tablesOk = false;
      } else if (error) {
        console.log(`‚ö†Ô∏è  Tabela "${table}" existe mas tem problemas de permiss√£o:`, error.message);
      } else {
        console.log(`‚úÖ Tabela "${table}" existe e est√° acess√≠vel`);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao verificar tabela "${table}":`, error.message);
      tablesOk = false;
    }
  }

  if (!tablesOk) {
    console.log('\n‚ùå Algumas tabelas est√£o faltando. Execute o SQL schema primeiro.');
    return false;
  }

  // Test 2: Check user_profiles table (optional)
  console.log('\nüîç Verificando tabela user_profiles (opcional)...');
  try {
    const { error } = await supabase.from('user_profiles').select('*', { count: 'exact', head: true });
    
    if (error && error.code === '42P01') {
      console.log('‚ö†Ô∏è  Tabela "user_profiles" n√£o existe (usando access_requests como fallback)');
    } else if (error) {
      console.log('‚ö†Ô∏è  Tabela "user_profiles" existe mas tem problemas:', error.message);
    } else {
      console.log('‚úÖ Tabela "user_profiles" existe e est√° acess√≠vel');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  Erro ao verificar user_profiles:', error.message);
  }

  // Test 3: Test access request creation (signup simulation)
  console.log('\nüìù Testando cria√ß√£o de solicita√ß√£o de acesso...');
  
  const testEmail = `test.${Date.now()}@example.com`;
  
  try {
    const { data: newRequest, error: requestError } = await supabase
      .from('access_requests')
      .insert([{
        email: testEmail,
        full_name: 'Usu√°rio Teste',
        phone: '(11) 99999-9999',
        department: 'vendas',
        justification: 'Teste de funcionalidade',
        status: 'pending'
      }])
      .select()
      .single();

    if (requestError) {
      console.log('‚ùå Erro ao criar solicita√ß√£o:', requestError.message);
      return false;
    }

    console.log('‚úÖ Solicita√ß√£o criada com sucesso:', newRequest.id);

    // Clean up - remove test request
    await supabase
      .from('access_requests')
      .delete()
      .eq('id', newRequest.id);

    console.log('üóëÔ∏è  Solicita√ß√£o de teste removida');

  } catch (error) {
    console.log('‚ùå Erro no teste de cria√ß√£o:', error.message);
    return false;
  }

  // Test 4: Test login attempt logging
  console.log('\nüìä Testando log de tentativas de login...');
  
  try {
    const { data: logData, error: logError } = await supabase
      .from('login_attempts')
      .insert([{
        email: testEmail,
        success: false,
        attempted_at: new Date().toISOString()
      }])
      .select()
      .single();

    if (logError) {
      console.log('‚ùå Erro ao criar log:', logError.message);
      return false;
    }

    console.log('‚úÖ Log de tentativa criado com sucesso');

    // Clean up
    await supabase
      .from('login_attempts')
      .delete()
      .eq('id', logData.id);

    console.log('üóëÔ∏è  Log de teste removido');

  } catch (error) {
    console.log('‚ùå Erro no teste de log:', error.message);
    return false;
  }

  console.log('\nüéâ Todos os testes passaram!');
  console.log('\nüìã Resumo da funcionalidade de login:');
  console.log('  ‚úÖ Vari√°veis de ambiente configuradas');
  console.log('  ‚úÖ Tabelas necess√°rias existem');
  console.log('  ‚úÖ Cria√ß√£o de solicita√ß√µes funciona');
  console.log('  ‚úÖ Log de tentativas funciona');
  console.log('\nüöÄ A p√°gina /login deve funcionar corretamente!');
  
  return true;
}

// Run the test
if (require.main === module) {
  testLogin()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Teste falhou:', error);
      process.exit(1);
    });
}

module.exports = { testLogin };
