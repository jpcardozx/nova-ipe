#!/usr/bin/env node

/**
 * üîç Recupera√ß√£o via History API HTTP
 * 
 * Usa a API de hist√≥rico do Sanity para acessar todas as revis√µes
 * Refer√™ncia: https://www.sanity.io/docs/http-reference/history
 */

import dotenv from 'dotenv'

dotenv.config()
dotenv.config({ path: '.env.local' })

const PROJECT_ID = '0nks58lj'
const DATASET = 'production'
const TOKEN = process.env.SANITY_API_TOKEN
const DOCUMENT_ID = 'd5476428-a47b-4075-9383-f0cf58f58d66'

console.log('\nüîç HISTORY API - Busca de Revis√µes')
console.log('‚ïê'.repeat(70))
console.log(`üìã Document ID: ${DOCUMENT_ID}`)
console.log(`üì¶ Project: ${PROJECT_ID}`)
console.log(`üìä Dataset: ${DATASET}`)
console.log('‚ïê'.repeat(70))
console.log('')

async function buscarHistoricoCompleto() {
  console.log('1Ô∏è‚É£ Buscando hist√≥rico de transa√ß√µes via History API...\n')
  
  // Endpoint da History API
  // GET /v1/data/history/{dataset}/transactions/{documentId}
  const url = `https://${PROJECT_ID}.api.sanity.io/v1/data/history/${DATASET}/transactions/${DOCUMENT_ID}`
  
  console.log(`üåê Endpoint: ${url}`)
  console.log('')
  
  try {
    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const data = await response.json()
    
    console.log('‚úÖ Resposta recebida!\n')
    console.log('‚îÄ'.repeat(70))
    
    if (data.transactions && data.transactions.length > 0) {
      console.log(`üìã Total de transa√ß√µes encontradas: ${data.transactions.length}\n`)
      
      // Ordena por timestamp (mais recente primeiro)
      const transactions = data.transactions.sort((a, b) => 
        new Date(b.timestamp) - new Date(a.timestamp)
      )
      
      // Mostra as √∫ltimas 10 transa√ß√µes
      console.log('üìù √öltimas transa√ß√µes:\n')
      
      transactions.slice(0, 10).forEach((tx, i) => {
        const date = new Date(tx.timestamp)
        const type = tx.mutations ? 
          (tx.mutations.some(m => m.delete) ? 'üóëÔ∏è  DELETE' :
           tx.mutations.some(m => m.create) ? '‚ûï CREATE' :
           tx.mutations.some(m => m.patch) ? '‚úèÔ∏è  PATCH' :
           tx.mutations.some(m => m.createOrReplace) ? 'üîÑ CREATE/REPLACE' :
           '‚ùì OUTROS') : '‚ùì SEM MUTATIONS'
        
        console.log(`${i + 1}. ${type}`)
        console.log(`   Timestamp: ${date.toLocaleString('pt-BR')}`)
        console.log(`   Transaction ID: ${tx.id}`)
        console.log(`   Author: ${tx.author || 'N/A'}`)
        
        if (tx.mutations) {
          tx.mutations.forEach(mut => {
            if (mut.delete) {
              console.log(`   ‚ö†Ô∏è  DELETOU: ${mut.delete.id}`)
            }
            if (mut.create) {
              console.log(`   üìÑ Documento criado`)
            }
            if (mut.patch) {
              console.log(`   üìù Campos modificados`)
            }
          })
        }
        console.log('')
      })
      
      return transactions
    } else {
      console.log('‚ùå Nenhuma transa√ß√£o encontrada para este documento')
      console.log('')
      console.log('üí° Isso pode significar:')
      console.log('   1. O documento nunca existiu')
      console.log('   2. Foi deletado e o hist√≥rico foi limpo')
      console.log('   3. O ID est√° incorreto')
      return []
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao acessar History API:', error.message)
    
    if (error.message.includes('401')) {
      console.error('\nüîí Erro de autentica√ß√£o!')
      console.error('   Verifique se o token est√° correto')
    } else if (error.message.includes('403')) {
      console.error('\nüîí Erro de permiss√£o!')
      console.error('   O token pode n√£o ter acesso √† History API')
      console.error('   Pode ser necess√°rio token com role "Administrator"')
    } else if (error.message.includes('404')) {
      console.error('\n‚ùì Documento n√£o encontrado')
      console.error('   O documento pode nunca ter existido com esse ID')
    }
    
    throw error
  }
}

async function buscarRevisaoEspecifica(transactionId) {
  console.log(`\n2Ô∏è‚É£ Buscando conte√∫do da revis√£o: ${transactionId}...\n`)
  
  // Endpoint para buscar o conte√∫do de uma revis√£o espec√≠fica
  // GET /v1/data/history/{dataset}/documents/{documentId}?revision={transactionId}
  const url = `https://${PROJECT_ID}.api.sanity.io/v1/data/history/${DATASET}/documents/${DOCUMENT_ID}?revision=${transactionId}`
  
  try {
    const response = await fetch(url, {
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json'
      }
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const document = await response.json()
    
    console.log('‚úÖ Documento recuperado!\n')
    console.log('‚îÄ'.repeat(70))
    console.log(JSON.stringify(document, null, 2))
    console.log('‚îÄ'.repeat(70))
    
    return document
    
  } catch (error) {
    console.error('‚ùå Erro ao buscar revis√£o:', error.message)
    return null
  }
}

async function restaurarDocumento(doc) {
  console.log('\n3Ô∏è‚É£ Restaurando documento...\n')
  
  // Remove campos do sistema que n√£o devem ser enviados
  const { _rev, ...docLimpo } = doc
  
  // Garante o ID correto (publicado, n√£o draft)
  docLimpo._id = DOCUMENT_ID
  
  console.log(`üìù Preparando para restaurar:`)
  console.log(`   ID: ${docLimpo._id}`)
  console.log(`   T√≠tulo: ${docLimpo.titulo || 'N/A'}`)
  console.log('')
  
  const url = `https://${PROJECT_ID}.api.sanity.io/v1/data/mutate/${DATASET}`
  
  const payload = {
    mutations: [
      {
        createOrReplace: docLimpo
      }
    ]
  }
  
  console.log('‚è±Ô∏è  Aguarde 3 segundos... (Ctrl+C para cancelar)')
  await new Promise(resolve => setTimeout(resolve, 1000))
  console.log('   2...')
  await new Promise(resolve => setTimeout(resolve, 1000))
  console.log('   1...')
  await new Promise(resolve => setTimeout(resolve, 1000))
  console.log('')
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${TOKEN}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(payload)
    })
    
    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(`HTTP ${response.status}: ${errorText}`)
    }
    
    const result = await response.json()
    
    console.log('‚úÖ DOCUMENTO RESTAURADO COM SUCESSO!')
    console.log('‚îÄ'.repeat(70))
    console.log(JSON.stringify(result, null, 2))
    console.log('‚îÄ'.repeat(70))
    console.log('')
    console.log('üéâ Acesse no Studio:')
    console.log(`   https://imobiliariaipe.com.br/studio/structure/imovel;${DOCUMENT_ID}`)
    console.log('')
    
    return result
    
  } catch (error) {
    console.error('‚ùå Erro ao restaurar:', error.message)
    throw error
  }
}

async function main() {
  try {
    // 1. Busca o hist√≥rico de transa√ß√µes
    const transactions = await buscarHistoricoCompleto()
    
    if (transactions.length === 0) {
      console.log('\n‚ïê'.repeat(70))
      console.log('‚ùå Sem transa√ß√µes para processar')
      console.log('‚ïê'.repeat(70))
      return
    }
    
    // 2. Encontra a √∫ltima transa√ß√£o ANTES do delete
    console.log('\n‚îÄ'.repeat(70))
    console.log('üîç Procurando √∫ltima vers√£o v√°lida do documento...\n')
    
    const deleteTransaction = transactions.find(tx => 
      tx.mutations?.some(m => m.delete)
    )
    
    if (deleteTransaction) {
      console.log('üóëÔ∏è  DELETE encontrado:')
      console.log(`   Data: ${new Date(deleteTransaction.timestamp).toLocaleString('pt-BR')}`)
      console.log(`   Transaction ID: ${deleteTransaction.id}`)
      console.log(`   Author: ${deleteTransaction.author || 'N/A'}`)
      console.log('')
    }
    
    // Pega a transa√ß√£o anterior ao delete (ou a mais recente se n√£o houver delete)
    const deleteIndex = deleteTransaction ? transactions.indexOf(deleteTransaction) : -1
    const validTransaction = deleteIndex > 0 ? transactions[deleteIndex + 1] : transactions[0]
    
    if (validTransaction) {
      console.log('‚úÖ √öltima vers√£o v√°lida encontrada:')
      console.log(`   Data: ${new Date(validTransaction.timestamp).toLocaleString('pt-BR')}`)
      console.log(`   Transaction ID: ${validTransaction.id}`)
      console.log('')
      
      // 3. Busca o conte√∫do dessa revis√£o
      const doc = await buscarRevisaoEspecifica(validTransaction.id)
      
      if (doc && doc.titulo) {
        // 4. Restaura o documento
        await restaurarDocumento(doc)
      } else {
        console.log('\n‚ö†Ô∏è  Revis√£o encontrada mas sem conte√∫do completo')
        console.log('   Tente outra revis√£o manualmente')
      }
    } else {
      console.log('‚ùå N√£o foi poss√≠vel encontrar uma vers√£o v√°lida')
    }
    
    console.log('\n‚ïê'.repeat(70))
    
  } catch (error) {
    console.error('\nüí• Erro no processo:', error.message)
    console.log('\n‚ïê'.repeat(70))
    process.exit(1)
  }
}

main()
