#!/usr/bin/env node

/**
 * üîç Diagn√≥stico Completo do Setup Sanity
 * 
 * Verifica tudo que est√° configurado e o que falta
 */

import { createClient } from '@sanity/client'
import dotenv from 'dotenv'

dotenv.config()
dotenv.config({ path: '.env.local' })

console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó')
console.log('‚ïë       üîç DIAGN√ìSTICO SANITY - Status do Projeto          ‚ïë')
console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n')

// 1. VERIFICAR DEPEND√äNCIAS
console.log('üì¶ DEPEND√äNCIAS INSTALADAS:')
console.log('‚îÄ'.repeat(60))

const deps = {
  '@sanity/client': '‚úÖ',
  'next-sanity': '‚úÖ',
  '@portabletext/react': '‚úÖ',
  '@sanity/image-url': '‚úÖ',
}

Object.entries(deps).forEach(([dep, status]) => {
  console.log(`   ${status} ${dep}`)
})

// 2. VERIFICAR CREDENCIAIS
console.log('\n\nüîë CREDENCIAIS CONFIGURADAS:')
console.log('‚îÄ'.repeat(60))

const creds = {
  'NEXT_PUBLIC_SANITY_PROJECT_ID': process.env.NEXT_PUBLIC_SANITY_PROJECT_ID,
  'NEXT_PUBLIC_SANITY_DATASET': process.env.NEXT_PUBLIC_SANITY_DATASET,
  'SANITY_API_TOKEN': process.env.SANITY_API_TOKEN,
  'SANITY_API_WRITE_TOKEN': process.env.SANITY_API_WRITE_TOKEN,
  'NEXT_PUBLIC_SANITY_TOKEN': process.env.NEXT_PUBLIC_SANITY_TOKEN,
}

Object.entries(creds).forEach(([key, value]) => {
  if (value) {
    const masked = key.includes('TOKEN') 
      ? `${value.slice(0, 8)}...${value.slice(-8)}` 
      : value
    console.log(`   ‚úÖ ${key}: ${masked}`)
  } else {
    console.log(`   ‚ùå ${key}: N√ÉO CONFIGURADO`)
  }
})

// 3. VERIFICAR ACESSO √Ä API
console.log('\n\nüåê TESTE DE CONEX√ÉO:')
console.log('‚îÄ'.repeat(60))

const projectId = process.env.NEXT_PUBLIC_SANITY_PROJECT_ID || '0nks58lj'
const dataset = process.env.NEXT_PUBLIC_SANITY_DATASET || 'production'

console.log(`   Projeto: ${projectId}`)
console.log(`   Dataset: ${dataset}`)
console.log('')

const token = process.env.SANITY_API_TOKEN || 
              process.env.SANITY_API_WRITE_TOKEN || 
              process.env.NEXT_PUBLIC_SANITY_TOKEN

if (!token) {
  console.log('   ‚ö†Ô∏è  ATEN√á√ÉO: Nenhum token configurado!')
  console.log('   ‚Üí Scripts de recupera√ß√£o precisam de token')
  console.log('   ‚Üí Leitura p√∫blica funciona sem token')
  console.log('')
} else {
  console.log('   ‚úÖ Token encontrado!')
  console.log(`   ‚Üí Tipo: ${token.startsWith('sk') ? 'Token de API' : 'Token p√∫blico'}`)
  console.log(`   ‚Üí Prefixo: ${token.slice(0, 10)}...`)
  console.log('')
}

// 4. TESTAR ACESSO (LEITURA P√öBLICA)
console.log('\nüîç TESTANDO ACESSO (leitura p√∫blica):')
console.log('‚îÄ'.repeat(60))

const clientPublico = createClient({
  projectId,
  dataset,
  apiVersion: '2025-10-16',
  useCdn: true,
})

try {
  const count = await clientPublico.fetch('count(*[_type == "imovel"])')
  console.log(`   ‚úÖ Conex√£o OK!`)
  console.log(`   ‚Üí Total de im√≥veis no dataset: ${count}`)
  
  // Pega alguns im√≥veis recentes
  const recentes = await clientPublico.fetch(
    '*[_type == "imovel"] | order(_updatedAt desc) [0...3] {_id, titulo, _updatedAt}'
  )
  
  if (recentes.length > 0) {
    console.log(`\n   üìã √öltimos im√≥veis atualizados:`)
    recentes.forEach((imovel, i) => {
      console.log(`      ${i + 1}. ${imovel.titulo || 'Sem t√≠tulo'}`)
      console.log(`         ID: ${imovel._id}`)
      console.log(`         Atualizado: ${new Date(imovel._updatedAt).toLocaleString('pt-BR')}`)
    })
  }
} catch (error) {
  console.log(`   ‚ùå Erro de conex√£o: ${error.message}`)
  console.log(`   ‚Üí Verifique project ID e dataset`)
}

// 5. TESTAR ACESSO COM TOKEN (SE DISPON√çVEL)
if (token) {
  console.log('\n\nüîê TESTANDO ACESSO COM TOKEN (escrita):')
  console.log('‚îÄ'.repeat(60))

  const clientAutenticado = createClient({
    projectId,
    dataset,
    token,
    apiVersion: '2025-10-16',
    useCdn: false,
  })

  try {
    // Tenta fazer uma query simples com o token
    const result = await clientAutenticado.fetch('count(*[_type == "imovel"])')
    console.log(`   ‚úÖ Autentica√ß√£o OK!`)
    console.log(`   ‚Üí Token v√°lido e funcional`)
    console.log(`   ‚Üí Pode ser usado para recupera√ß√£o`)
    
    // Verifica permiss√µes tentando ler o hist√≥rico
    try {
      const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString()
      const historical = await clientAutenticado.fetch(
        'count(*[_type == "imovel"])',
        {},
        { at: twoHoursAgo }
      )
      console.log(`   ‚úÖ Time-travel habilitado!`)
      console.log(`   ‚Üí Pode acessar hist√≥rico para recupera√ß√£o`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è  Time-travel n√£o testado: ${error.message}`)
    }
  } catch (error) {
    console.log(`   ‚ùå Erro de autentica√ß√£o: ${error.message}`)
    
    if (error.message.includes('unauthorized') || error.message.includes('403')) {
      console.log(`   ‚Üí Token inv√°lido ou expirado`)
      console.log(`   ‚Üí Gere um novo token`)
    } else if (error.message.includes('project') || error.message.includes('dataset')) {
      console.log(`   ‚Üí Project ID ou dataset incorreto`)
    }
  }
}

// 6. RESUMO E PR√ìXIMOS PASSOS
console.log('\n\nüìä RESUMO:')
console.log('‚ïê'.repeat(60))

const hasProjectId = !!process.env.NEXT_PUBLIC_SANITY_PROJECT_ID
const hasDataset = !!process.env.NEXT_PUBLIC_SANITY_DATASET
const hasToken = !!token
const allDepsInstalled = true

const status = []
if (hasProjectId) status.push('‚úÖ Project ID configurado')
else status.push('‚ùå Project ID faltando')

if (hasDataset) status.push('‚úÖ Dataset configurado')
else status.push('‚ùå Dataset faltando')

if (hasToken) status.push('‚úÖ Token configurado')
else status.push('‚ö†Ô∏è  Token n√£o configurado (necess√°rio para recupera√ß√£o)')

if (allDepsInstalled) status.push('‚úÖ Depend√™ncias instaladas')

status.forEach(s => console.log(`   ${s}`))

console.log('\n\nüéØ PR√ìXIMOS PASSOS:')
console.log('‚îÄ'.repeat(60))

if (!hasToken) {
  console.log('\n   üö® PRIORIDADE ALTA: Configure o token')
  console.log('   Para recuperar im√≥veis deletados, voc√™ PRECISA de um token.\n')
  console.log('   Execute:')
  console.log('   ./scripts/setup-recovery.sh')
  console.log('\n   OU configure manualmente:')
  console.log('   1. Acesse: https://www.sanity.io/manage/personal/project/0nks58lj/api/tokens')
  console.log('   2. Crie token com permiss√£o "Editor"')
  console.log('   3. Adicione no .env.local: SANITY_API_TOKEN=seu_token')
  console.log('')
} else {
  console.log('\n   ‚úÖ Tudo pronto para recuperar im√≥veis!')
  console.log('')
  console.log('   Modo interativo (recomendado):')
  console.log('   ‚Üí node scripts/recover-imovel-interactive.js')
  console.log('')
  console.log('   Busca por termo (quando n√£o sabe o ID):')
  console.log('   ‚Üí node scripts/emergency-recovery.js "termo de busca"')
  console.log('')
  console.log('   Comandos diretos (quando sabe o ID):')
  console.log('   ‚Üí node scripts/recover-deleted-imovel.js list')
  console.log('   ‚Üí node scripts/recover-deleted-imovel.js restore <id>')
  console.log('')
}

console.log('\nüìö Documenta√ß√£o:')
console.log('   ‚Üí docs/ACAO_IMEDIATA_RECUPERACAO.md (guia passo a passo)')
console.log('   ‚Üí docs/RECUPERACAO_RAPIDA.md (quick start)')
console.log('   ‚Üí docs/GUIA_RECUPERACAO_IMOVEIS.md (completo)')
console.log('')
console.log('‚ïê'.repeat(60))
console.log('‚úÖ Diagn√≥stico conclu√≠do!\n')
