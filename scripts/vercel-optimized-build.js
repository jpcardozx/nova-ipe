#!/usr/bin/env node
/**
 * Script de build otimizado para Vercel
 * Este script combina todas as corre√ß√µes necess√°rias e executa o build
 * com configura√ß√µes que garantem que o Tailwind CSS funcione corretamente.
 */

const { execSync } = require('child_process');
const path = require('path');
const fs = require('fs');

console.log('üöÄ Iniciando build otimizado para Vercel...');

// Fun√ß√£o para executar um comando e exibir a sa√≠da
function runCommand(command, options = {}) {
    console.log(`üìå Executando: ${command}`);
    try {
        execSync(command, {
            stdio: 'inherit',
            ...options
        });
        return true;
    } catch (error) {
        console.error(`‚ùå Erro ao executar o comando: ${command}`);
        console.error(error.message);
        return false;
    }
}

// Verificar o ambiente
console.log('üìä Verificando ambiente...');
console.log(`üìå Node.js: ${process.version}`);
console.log(`üìå Diret√≥rio atual: ${process.cwd()}`);

// Configura√ß√µes de ambiente para garantir funcionamento do Tailwind CSS
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
process.env.TAILWIND_MODE = 'build';
process.env.NEXT_RUNTIME = 'nodejs';

// 1. Garantir que os m√≥dulos necess√°rios estejam instalados
console.log('üì¶ Verificando e instalando depend√™ncias cr√≠ticas...');
const requiredDeps = [
    'tailwindcss@latest',
    'postcss@latest',
    'autoprefixer@latest',
    '@tailwindcss/forms@latest'
];

runCommand(`npm install --no-save ${requiredDeps.join(' ')}`);

// 2. Aplicar corre√ß√µes espec√≠ficas
console.log('üîß Aplicando corre√ß√µes espec√≠ficas...');

// Aplicar corre√ß√£o do CSS Loader
if (fs.existsSync(path.join(process.cwd(), 'scripts', 'fix-css-loader.js'))) {
    runCommand('node scripts/fix-css-loader.js');
} else {
    console.log('‚ö†Ô∏è fix-css-loader.js n√£o encontrado. Pulando esta etapa.');
}

// Aplicar outras corre√ß√µes
const corrections = [
    'scripts/direct-tailwind-patch.js',
    'scripts/create-minimal-tailwind.js',
    'scripts/create-minimal-postcss.js',
    'scripts/fix-nextjs-config.js'
];

corrections.forEach(script => {
    if (fs.existsSync(path.join(process.cwd(), script))) {
        runCommand(`node ${script}`);
    }
});

// 3. Aplicar patch direto no PostCSS
console.log('üîß Garantindo configura√ß√£o correta do PostCSS...');
const postcssConfigPath = path.join(process.cwd(), 'postcss.config.js');
const postcssConfig = `
// postcss.config.js
// Vers√£o otimizada para compatibilidade com Vercel e NextJS 15+
const path = require('path');

module.exports = {
  plugins: [
    require('tailwindcss')({
      config: path.join(__dirname, 'tailwind.config.js')
    }),
    require('autoprefixer')
  ]
};
`;

fs.writeFileSync(postcssConfigPath, postcssConfig);
console.log('‚úÖ postcss.config.js atualizado com sucesso!');

// 4. Executar build com configura√ß√µes otimizadas
console.log('üèóÔ∏è Iniciando build do Next.js...');

// Configura√ß√µes de ambiente adicionais para o build
process.env.NEXT_TELEMETRY_DISABLED = '1';
process.env.NEXT_SHARP_PATH = path.join(process.cwd(), 'node_modules', 'sharp');
process.env.TAILWIND_CSS_DISABLED = '0'; // Garantir que o Tailwind est√° ativado

// Executar o build do Next.js
const buildResult = runCommand('next build');

if (buildResult) {
    console.log('üéâ Build completado com sucesso!');
} else {
    console.error('‚ùå Build falhou. Tentando abordagem alternativa...');

    // Tentar abordagem alternativa com modo standalone
    console.log('üîÑ Tentando build com modo standalone...');
    process.env.NEXT_MINIMAL = '1';

    // Tentar com --no-lint para evitar problemas n√£o relacionados
    const alternativeBuildResult = runCommand('next build --no-lint');

    if (alternativeBuildResult) {
        console.log('üéâ Build alternativo completado com sucesso!');
    } else {
        console.error('‚ùå Todas as tentativas de build falharam.');
        process.exit(1);
    }
}

console.log('‚úÖ Processo de build finalizado.');
