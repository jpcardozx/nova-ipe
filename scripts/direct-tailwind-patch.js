/**
 * Script para for√ßar instala√ß√£o e resolu√ß√£o direta do Tailwind CSS
 * Este script garantir√° que o Tailwind CSS esteja dispon√≠vel durante o build
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando resolu√ß√£o direta do Tailwind CSS...');

// Verificar se os m√≥dulos necess√°rios est√£o instalados
const modulesList = [
    'tailwindcss',
    'postcss',
    'autoprefixer'
];

// Fun√ß√£o para verificar se um m√≥dulo existe
function checkModuleExists(moduleName) {
    try {
        const modulePath = path.join(process.cwd(), 'node_modules', moduleName);
        return fs.existsSync(modulePath);
    } catch (error) {
        return false;
    }
}

// Fun√ß√£o para instalar m√≥dulos
function installModules(modules) {
    const modulesToInstall = modules.filter(module => !checkModuleExists(module));

    if (modulesToInstall.length > 0) {
        console.log(`üì¶ Instalando m√≥dulos faltantes: ${modulesToInstall.join(', ')}`);
        try {
            execSync(`npm install --no-save ${modulesToInstall.join(' ')}`, { stdio: 'inherit' });
            console.log('‚úÖ M√≥dulos instalados com sucesso!');
        } catch (error) {
            console.error('‚ùå Falha ao instalar m√≥dulos:', error.message);
            console.log('‚ö†Ô∏è Usando implementa√ß√µes minimalistas como fallback...');

            // Criar implementa√ß√µes minimalistas
            if (!checkModuleExists('tailwindcss')) {
                require('./create-minimal-tailwind.js');
            }

            if (!checkModuleExists('postcss')) {
                require('./create-minimal-postcss.js');
            }
        }
    } else {
        console.log('‚úÖ Todos os m√≥dulos necess√°rios j√° est√£o instalados.');
    }
}

// Verificar configura√ß√£o do Next.js
function patchNextConfig() {
    const nextConfigPath = path.join(process.cwd(), 'next.config.js');
    if (!fs.existsSync(nextConfigPath)) {
        console.error('‚ùå Arquivo next.config.js n√£o encontrado');
        return;
    }

    console.log('üîß Aplicando patch direta no next.config.js...');

    // Ler o conte√∫do atual
    let configContent = fs.readFileSync(nextConfigPath, 'utf8');

    // Verificar se o patch j√° foi aplicado
    if (configContent.includes('// TAILWIND DIRECT PATCH')) {
        console.log('‚úÖ Patch j√° aplicado anteriormente.');
        return;
    }

    // Criar backup
    const backupPath = path.join(process.cwd(), 'next.config.js.bak');
    fs.writeFileSync(backupPath, configContent);
    console.log('üìù Backup do next.config.js criado.');

    // Adicionar o patch no topo
    const patchContent = `
// TAILWIND DIRECT PATCH
const fs = require('fs');
const originalResolveFilename = require('module')._resolveFilename;

// Substituir o mecanismo de resolu√ß√£o de m√≥dulo do Node.js
require('module')._resolveFilename = function(request, parent, isMain, options) {
  if (request === 'tailwindcss' || request.startsWith('tailwindcss/')) {
    try {
      return originalResolveFilename(request, parent, isMain, options);
    } catch (e) {
      console.warn('‚ö†Ô∏è Redirecionando resolu√ß√£o de tailwindcss para implementa√ß√£o local');
      return originalResolveFilename(request.replace('tailwindcss', '${path.join(process.cwd(), 'node_modules', 'tailwindcss')}'), parent, isMain, options);
    }
  }
  
  if (request === 'postcss' || request.startsWith('postcss/')) {
    try {
      return originalResolveFilename(request, parent, isMain, options);
    } catch (e) {
      console.warn('‚ö†Ô∏è Redirecionando resolu√ß√£o de postcss para implementa√ß√£o local');
      return originalResolveFilename(request.replace('postcss', '${path.join(process.cwd(), 'node_modules', 'postcss')}'), parent, isMain, options);
    }
  }
  
  return originalResolveFilename(request, parent, isMain, options);
};
`;

    // Inserir o patch no topo do arquivo
    configContent = patchContent + configContent;
    fs.writeFileSync(nextConfigPath, configContent);
    console.log('‚úÖ Patch aplicado ao next.config.js com sucesso!');
}

// Criar link para o tailwind global se existir
function createGlobalModuleLinks() {
    console.log('üîç Verificando m√≥dulos globais...');

    try {
        // Tentar encontrar instala√ß√µes globais
        let globalModulesPath;
        try {
            globalModulesPath = execSync('npm root -g').toString().trim();
        } catch (e) {
            console.log('‚ö†Ô∏è N√£o foi poss√≠vel encontrar o diret√≥rio de m√≥dulos globais');
            return;
        }

        modulesList.forEach(moduleName => {
            const globalModulePath = path.join(globalModulesPath, moduleName);
            const localModulePath = path.join(process.cwd(), 'node_modules', moduleName);

            // Se o m√≥dulo existe globalmente mas n√£o localmente, criar link simb√≥lico
            if (fs.existsSync(globalModulePath) && !fs.existsSync(localModulePath)) {
                try {
                    console.log(`üîó Criando link do m√≥dulo global ${moduleName}...`);

                    // Criar diret√≥rio se n√£o existir
                    if (!fs.existsSync(path.dirname(localModulePath))) {
                        fs.mkdirSync(path.dirname(localModulePath), { recursive: true });
                    }

                    // Em sistemas que n√£o suportam symlinks, copiar o diret√≥rio
                    fs.mkdirSync(localModulePath, { recursive: true });

                    const files = fs.readdirSync(globalModulePath);
                    files.forEach(file => {
                        const srcFile = path.join(globalModulePath, file);
                        const destFile = path.join(localModulePath, file);

                        if (fs.statSync(srcFile).isDirectory()) {
                            fs.mkdirSync(destFile, { recursive: true });
                            // Copiar apenas arquivos essenciais para evitar loop recursivo
                            const essentialFiles = fs.readdirSync(srcFile).filter(f => f.endsWith('.js') || f.endsWith('.json'));
                            essentialFiles.forEach(essFile => {
                                fs.copyFileSync(path.join(srcFile, essFile), path.join(destFile, essFile));
                            });
                        } else {
                            fs.copyFileSync(srcFile, destFile);
                        }
                    });

                    console.log(`‚úÖ M√≥dulo ${moduleName} copiado do global`);
                } catch (error) {
                    console.error(`‚ùå Erro ao criar link para ${moduleName}: ${error.message}`);
                }
            }
        });
    } catch (error) {
        console.error('‚ùå Erro ao verificar m√≥dulos globais:', error.message);
    }
}

// Verificar e corrigir o arquivo postcss.config.js
function fixPostcssConfig() {
    const postcssConfigPath = path.join(process.cwd(), 'postcss.config.js');

    if (!fs.existsSync(postcssConfigPath)) {
        console.log('‚ö†Ô∏è Arquivo postcss.config.js n√£o encontrado, criando...');
        const postcssConfig = `
// postcss.config.js
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};
`;
        fs.writeFileSync(postcssConfigPath, postcssConfig);
        console.log('‚úÖ postcss.config.js criado com sucesso!');
    } else {
        console.log('‚úÖ postcss.config.js j√° existe.');
    }
}

// Aplicar o patch na configura√ß√£o
function applyWebpackPatch() {
    const nextConfigPath = path.join(process.cwd(), 'next.config.js');
    if (!fs.existsSync(nextConfigPath)) {
        console.error('‚ùå Arquivo next.config.js n√£o encontrado');
        return;
    }

    // Ler o conte√∫do atual
    let configContent = fs.readFileSync(nextConfigPath, 'utf8');

    // Verificar se o webpack j√° foi modificado para incluir resolvedModules
    if (configContent.includes('resolveLoader') && configContent.includes('modules: [')) {
        console.log('‚úÖ Configura√ß√£o webpack para resolvedModules j√° aplicada.');
        return;
    }

    // Encontrar a configura√ß√£o webpack existente
    if (configContent.includes('webpack: (config,')) {
        console.log('üîß Modificando configura√ß√£o webpack existente...');

        // Adicionar config de resolveLoader
        configContent = configContent.replace(
            /webpack:\s*\(\s*config\s*,[^)]*\)\s*=>\s*{/,
            `webpack: (config, { isServer }) => {
    // Adicionar diret√≥rios de resolu√ß√£o para loaders
    if (!config.resolveLoader) {
      config.resolveLoader = {};
    }
    
    if (!config.resolveLoader.modules) {
      config.resolveLoader.modules = ['node_modules'];
    }
    
    // Adicionar diret√≥rio local para resolu√ß√£o de loaders
    config.resolveLoader.modules.push(path.resolve('./node_modules'));
    
    // Configura√ß√£o para m√≥dulos css
    if (config.module && config.module.rules) {
      const cssRule = config.module.rules.find(rule => 
        rule.test && rule.test.toString().includes('.css')
      );
      
      if (cssRule && cssRule.use) {
        cssRule.use.forEach(loader => {
          if (typeof loader === 'object' && loader.loader === 'css-loader') {
            // For√ßar resolu√ß√£o de tailwindcss no diret√≥rio do projeto
            loader.options = loader.options || {};
            loader.options.modules = loader.options.modules || {};
            loader.options.modules.getLocalIdent = undefined;
          }
        });
      }
    }
    
    // Configura√ß√£o original continua abaixo
`
        );

        // Verificar se a modifica√ß√£o foi aplicada
        if (!configContent.includes('config.resolveLoader.modules.push')) {
            console.error('‚ùå Falha ao modificar configura√ß√£o webpack');
        } else {
            fs.writeFileSync(nextConfigPath, configContent);
            console.log('‚úÖ Configura√ß√£o webpack modificada com sucesso!');
        }
    } else {
        console.error('‚ùå N√£o foi poss√≠vel encontrar configura√ß√£o webpack para modificar');
    }
}

// Fun√ß√£o principal
function main() {
    // Verificar e instalar m√≥dulos necess√°rios
    installModules(modulesList);

    // Criar links para m√≥dulos globais
    createGlobalModuleLinks();

    // Corrigir configura√ß√µes
    fixPostcssConfig();
    patchNextConfig();
    applyWebpackPatch();

    console.log('üéâ Patch direto do Tailwind CSS aplicado com sucesso!');
}

// Executar
main();
