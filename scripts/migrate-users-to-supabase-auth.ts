/**
 * Script para migrar usu√°rios existentes para Supabase Auth
 * 
 * Uso:
 * 1. Configurar vari√°veis de ambiente
 * 2. npx tsx scripts/migrate-users-to-supabase-auth.ts
 */

import { createClient } from '@supabase/supabase-js'
import * as readline from 'readline'

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Missing environment variables:')
  console.error('   - NEXT_PUBLIC_SUPABASE_URL')
  console.error('   - SUPABASE_SERVICE_ROLE_KEY')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false,
  },
})

interface UserProfile {
  id: string
  email: string
  full_name: string
  phone?: string
  department?: string
}

async function askConfirmation(question: string): Promise<boolean> {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  })

  return new Promise((resolve) => {
    rl.question(question + ' (yes/no): ', (answer) => {
      rl.close()
      resolve(answer.toLowerCase() === 'yes' || answer.toLowerCase() === 'y')
    })
  })
}

async function migrateUsers(dryRun = true) {
  console.log('üîç Buscando usu√°rios existentes...\n')

  // 1. Buscar todos os perfis de usu√°rios
  const { data: profiles, error: fetchError } = await supabase
    .from('user_profiles')
    .select('id, email, full_name, phone, department')
    .order('created_at', { ascending: true })

  if (fetchError) {
    console.error('‚ùå Erro ao buscar perfis:', fetchError)
    process.exit(1)
  }

  if (!profiles || profiles.length === 0) {
    console.log('‚ö†Ô∏è  Nenhum perfil encontrado')
    return
  }

  console.log(`üìä Encontrados ${profiles.length} perfis\n`)

  // Estat√≠sticas
  let migrated = 0
  let skipped = 0
  let errors = 0

  for (const profile of profiles as UserProfile[]) {
    console.log(`\nüìß Processando: ${profile.email}`)

    if (dryRun) {
      console.log('   üî∏ [DRY RUN] Usu√°rio seria criado')
      migrated++
      continue
    }

    try {
      // Verificar se usu√°rio j√° existe em auth.users
      const { data: existingUsers, error: checkError } = await supabase.auth.admin.listUsers()

      if (checkError) {
        console.error('   ‚ùå Erro ao verificar usu√°rio existente:', checkError.message)
        errors++
        continue
      }

      const userExists = existingUsers?.users?.some((u: any) => u.email === profile.email)

      if (userExists) {
        console.log('   ‚è≠Ô∏è  Usu√°rio j√° existe no auth.users')
        skipped++
        continue
      }

      // Criar usu√°rio em auth.users
      const { data: newUser, error: createError } = await supabase.auth.admin.createUser({
        email: profile.email,
        email_confirm: false, // Usu√°rio precisar√° confirmar email
        user_metadata: {
          full_name: profile.full_name,
          phone: profile.phone,
          department: profile.department,
          migrated_from: 'zoho_mail360',
          migration_date: new Date().toISOString(),
        },
      })

      if (createError) {
        console.error('   ‚ùå Erro ao criar usu√°rio:', createError.message)
        errors++
        continue
      }

      // Atualizar user_profiles com auth_user_id
      const { error: updateError } = await supabase
        .from('user_profiles')
        .update({ auth_user_id: newUser.user?.id })
        .eq('id', profile.id)

      if (updateError) {
        console.error('   ‚ö†Ô∏è  Usu√°rio criado mas erro ao atualizar profile:', updateError.message)
      }

      console.log('   ‚úÖ Usu√°rio migrado com sucesso')
      migrated++

    } catch (error) {
      console.error('   ‚ùå Erro inesperado:', error)
      errors++
    }
  }

  // Relat√≥rio final
  console.log('\n' + '='.repeat(50))
  console.log('üìä RELAT√ìRIO FINAL')
  console.log('='.repeat(50))
  console.log(`‚úÖ Migrados: ${migrated}`)
  console.log(`‚è≠Ô∏è  J√° existentes: ${skipped}`)
  console.log(`‚ùå Erros: ${errors}`)
  console.log(`üìß Total processado: ${profiles.length}`)
  console.log('='.repeat(50))

  if (!dryRun && migrated > 0) {
    console.log('\nüì¨ Pr√≥ximo passo: Enviar emails de defini√ß√£o de senha')
    console.log('   Execute: npx tsx scripts/send-password-reset-emails.ts')
  }
}

async function sendPasswordResetEmails() {
  console.log('üìß Enviando emails de redefini√ß√£o de senha...\n')

  const { data: profiles, error } = await supabase
    .from('user_profiles')
    .select('email')
    .not('auth_user_id', 'is', null)

  if (error) {
    console.error('‚ùå Erro ao buscar perfis:', error)
    process.exit(1)
  }

  if (!profiles || profiles.length === 0) {
    console.log('‚ö†Ô∏è  Nenhum perfil encontrado')
    return
  }

  let sent = 0
  let failed = 0

  for (const profile of profiles as { email: string }[]) {
    try {
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(profile.email, {
        redirectTo: `${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/reset-password`,
      })

      if (resetError) {
        console.error(`‚ùå ${profile.email}: ${resetError.message}`)
        failed++
      } else {
        console.log(`‚úÖ ${profile.email}`)
        sent++
      }
    } catch (error) {
      console.error(`‚ùå ${profile.email}: Erro inesperado`)
      failed++
    }
  }

  console.log('\n' + '='.repeat(50))
  console.log('üìä EMAILS ENVIADOS')
  console.log('='.repeat(50))
  console.log(`‚úÖ Enviados: ${sent}`)
  console.log(`‚ùå Falhas: ${failed}`)
  console.log('='.repeat(50))
}

// Main execution
async function main() {
  console.log('üöÄ Script de Migra√ß√£o Zoho ‚Üí Supabase Auth\n')

  const args = process.argv.slice(2)
  const isDryRun = !args.includes('--execute')
  const sendEmails = args.includes('--send-emails')

  if (sendEmails) {
    const confirm = await askConfirmation('Enviar emails de redefini√ß√£o de senha para todos os usu√°rios?')
    if (confirm) {
      await sendPasswordResetEmails()
    } else {
      console.log('‚ùå Opera√ß√£o cancelada')
    }
    return
  }

  if (isDryRun) {
    console.log('üî∏ MODO DRY RUN (simula√ß√£o)')
    console.log('   Para executar de verdade: npx tsx scripts/migrate-users-to-supabase-auth.ts --execute\n')
  } else {
    console.log('‚ö†Ô∏è  MODO EXECU√á√ÉO REAL')
    const confirm = await askConfirmation('Tem certeza que deseja migrar os usu√°rios?')
    if (!confirm) {
      console.log('‚ùå Opera√ß√£o cancelada')
      return
    }
    console.log('')
  }

  await migrateUsers(isDryRun)
}

main()
  .then(() => {
    console.log('\n‚úÖ Script conclu√≠do')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå Erro fatal:', error)
    process.exit(1)
  })
