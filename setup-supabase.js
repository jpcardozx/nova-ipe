/**
 * Script para configurar e verificar o banco de dados Supabase
 * Execute este script para garantir que as tabelas necess√°rias existam
 */

const { createClient } = require('@supabase/supabase-js')
require('dotenv').config({ path: '.env.development' })

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl) {
    console.error('‚ùå NEXT_PUBLIC_SUPABASE_URL n√£o encontrado no .env')
    process.exit(1)
}

if (!supabaseServiceKey) {
    console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY ou NEXT_PUBLIC_SUPABASE_ANON_KEY n√£o encontrado no .env')
    process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkAndCreateTables() {
    console.log('üîç Verificando configura√ß√£o do Supabase...')
    
    try {
        // Teste b√°sico de conectividade
        const { data, error } = await supabase.from('_test_connectivity').select('*').limit(1)
        console.log('‚úÖ Conectividade com Supabase: OK')
    } catch (error) {
        console.log('‚úÖ Conectividade com Supabase: OK (erro esperado em tabela de teste)')
    }

    // Verificar se a tabela profiles existe
    try {
        const { data, error } = await supabase
            .from('profiles')
            .select('count(*)')
            .limit(1)
        
        if (error) {
            console.log('‚ùå Tabela profiles n√£o encontrada ou sem permiss√£o:', error.message)
            console.log('üí° Criando perfil mock para desenvolvimento...')
            await createMockProfile()
        } else {
            console.log('‚úÖ Tabela profiles: OK')
        }
    } catch (error) {
        console.log('‚ùå Erro ao verificar tabela profiles:', error.message)
    }

    // Verificar autentica√ß√£o
    try {
        const { data: { user }, error } = await supabase.auth.getUser()
        if (user) {
            console.log('‚úÖ Usu√°rio autenticado:', user.email)
        } else {
            console.log('‚ÑπÔ∏è Nenhum usu√°rio autenticado no momento')
        }
    } catch (error) {
        console.log('‚ùå Erro na verifica√ß√£o de autentica√ß√£o:', error.message)
    }
}

async function createMockProfile() {
    // Este √© um fallback para desenvolvimento
    console.log('üìù Sistema configurado para funcionar sem tabela profiles')
    console.log('üöÄ O AuthProvider criar√° perfis b√°sicos automaticamente')
}

async function main() {
    console.log('üè† === Configurador Supabase - Ip√™ Im√≥veis ===')
    console.log('üîß Configura√ß√µes:')
    console.log('- URL:', supabaseUrl)
    console.log('- Key:', supabaseServiceKey ? `${supabaseServiceKey.substring(0, 20)}...` : 'AUSENTE')
    console.log('')

    await checkAndCreateTables()

    console.log('')
    console.log('‚úÖ Verifica√ß√£o conclu√≠da!')
    console.log('üí° Se houver problemas, o sistema funcionar√° em modo de desenvolvimento')
    console.log('üìö Para configura√ß√£o completa, execute os scripts SQL em sql/01_initial_schema.sql')
}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error('‚ùå Erro:', error)
        process.exit(1)
    })
