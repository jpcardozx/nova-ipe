'use client';

import React, { useState, useEffect } from 'react';
import { useImageAnalytics } from '../providers/ImageAnalyticsProvider';
import { cn } from '@/lib/utils';
import { Bar, Pie, Line } from 'react-chartjs-2';
import {
    Chart as ChartJS,
    CategoryScale,
    LinearScale,
    BarElement,
    Title,
    Tooltip,
    Legend,
    ArcElement,
    PointElement,
    LineElement,
} from 'chart.js';

// Registrar componentes do Chart.js
ChartJS.register(
    CategoryScale,
    LinearScale,
    BarElement,
    Title,
    Tooltip,
    Legend,
    ArcElement,
    PointElement,
    LineElement
);

export default function ImagePerformanceDashboard() {
    const { stats, refreshStats, clearStats } = useImageAnalytics();
    const [activeTab, setActiveTab] = useState('overview');
    const [autoRefresh, setAutoRefresh] = useState(false);

    // Auto-refresh
    useEffect(() => {
        if (!autoRefresh) return;

        const interval = setInterval(() => {
            refreshStats();
        }, 5000);

        return () => clearInterval(interval);
    }, [autoRefresh, refreshStats]);

    // Se não há dados suficientes
    if (!stats || stats.total < 2) {
        return (
            <div className="bg-white rounded-lg shadow p-6 min-h-[400px] flex flex-col items-center justify-center">
                <h2 className="text-xl font-semibold mb-4">Analytics de Imagens</h2>
                <p className="text-gray-500 mb-6">
                    Não há dados suficientes para exibir. Navegue pelo site para coletar métricas.
                </p>
                <div className="flex gap-2">
                    <button
                        onClick={refreshStats}
                        className="px-4 py-2 bg-amber-500 text-white rounded-md hover:bg-amber-600 transition-colors"
                    >
                        Atualizar Dados
                    </button>
                    <button
                        onClick={() => setAutoRefresh(!autoRefresh)}
                        className={cn(
                            "px-4 py-2 rounded-md transition-colors",
                            autoRefresh
                                ? "bg-green-500 text-white hover:bg-green-600"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                        )}
                    >
                        {autoRefresh ? 'Auto-Refresh Ativo' : 'Ativar Auto-Refresh'}
                    </button>
                </div>
            </div>
        );
    }

    // Preparar dados para componentes da UI
    const componentNames = Object.keys(stats.componentStats);
    const avgLoadTimes = componentNames.map(name => stats.componentStats[name].avgTime);
    const successRates = componentNames.map(name => {
        const component = stats.componentStats[name];
        return ((component.count - component.failures) / component.count) * 100;
    });

    return (
        <div className="bg-white rounded-lg shadow">
            {/* Header */}
            <div className="border-b border-gray-200 p-4 md:p-6 flex flex-col md:flex-row justify-between items-center">
                <h1 className="text-xl font-semibold text-gray-900">
                    Analytics de Desempenho de Imagens
                </h1>

                <div className="flex mt-4 md:mt-0 gap-2">
                    <button
                        onClick={() => refreshStats()}
                        className="px-3 py-1.5 text-sm bg-amber-500 text-white rounded hover:bg-amber-600 transition-colors"
                    >
                        Atualizar
                    </button>
                    <button
                        onClick={() => clearStats()}
                        className="px-3 py-1.5 text-sm bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors"
                    >
                        Limpar Dados
                    </button>
                    <button
                        onClick={() => setAutoRefresh(!autoRefresh)}
                        className={cn(
                            "px-3 py-1.5 text-sm rounded transition-colors",
                            autoRefresh
                                ? "bg-green-500 text-white hover:bg-green-600"
                                : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                        )}
                    >
                        {autoRefresh ? 'Auto: ON' : 'Auto: OFF'}
                    </button>
                </div>
            </div>

            {/* Tabs */}
            <div className="border-b border-gray-200">
                <nav className="flex space-x-4 px-4 md:px-6" aria-label="Tabs">
                    {['overview', 'components', 'events'].map((tab) => (
                        <button
                            key={tab}
                            onClick={() => setActiveTab(tab)}
                            className={cn(
                                'px-1 py-4 text-sm font-medium border-b-2 transition-colors',
                                activeTab === tab
                                    ? 'border-amber-500 text-amber-600'
                                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                            )}
                        >
                            {tab === 'overview' ? 'Visão Geral' : tab === 'components' ? 'Por Componente' : 'Eventos Recentes'}
                        </button>
                    ))}
                </nav>
            </div>

            {/* Content */}
            <div className="p-4 md:p-6">
                {/* Overview Tab */}
                {activeTab === 'overview' && (
                    <div className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h3 className="text-sm font-medium text-gray-500 mb-2">Total de Imagens</h3>
                                <div className="flex items-baseline">
                                    <span className="text-2xl font-semibold text-gray-900">{stats.total}</span>
                                    <span className="ml-2 text-sm text-gray-600">imagens carregadas</span>
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h3 className="text-sm font-medium text-gray-500 mb-2">Taxa de Sucesso</h3>
                                <div className="flex items-baseline">
                                    <span className="text-2xl font-semibold text-gray-900">
                                        {stats.successRate.toFixed(1)}%
                                    </span>
                                    <span className="ml-2 text-sm text-gray-600">
                                        ({stats.successful} de {stats.total})
                                    </span>
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg">
                                <h3 className="text-sm font-medium text-gray-500 mb-2">Tempo Médio</h3>
                                <div className="flex items-baseline">
                                    <span className="text-2xl font-semibold text-gray-900">
                                        {stats.averageLoadTime.toFixed(0)}ms
                                    </span>
                                    <span className="ml-2 text-sm text-gray-600">por imagem</span>
                                </div>
                            </div>
                        </div>

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div className="bg-gray-50 p-4 rounded-lg h-64">
                                <h3 className="text-sm font-medium text-gray-500 mb-4">Desempenho por Componente</h3>
                                <div className="h-48">
                                    <Bar
                                        data={{
                                            labels: componentNames,
                                            datasets: [{
                                                label: 'Tempo médio (ms)',
                                                data: avgLoadTimes.map(t => Math.round(t)),
                                                backgroundColor: 'rgba(245, 158, 11, 0.6)',
                                                borderColor: 'rgba(245, 158, 11, 1)',
                                                borderWidth: 1
                                            }]
                                        }}
                                        options={{
                                            responsive: true,
                                            maintainAspectRatio: false,
                                            plugins: {
                                                legend: { display: false },
                                            },
                                            scales: {
                                                y: { beginAtZero: true }
                                            }
                                        }}
                                    />
                                </div>
                            </div>

                            <div className="bg-gray-50 p-4 rounded-lg h-64">
                                <h3 className="text-sm font-medium text-gray-500 mb-4">Taxa de Sucesso por Componente</h3>
                                <div className="h-48">
                                    <Pie
                                        data={{
                                            labels: ['Sucesso', 'Falha'],
                                            datasets: [{
                                                data: [stats.successful, stats.failed],
                                                backgroundColor: [
                                                    'rgba(16, 185, 129, 0.6)',  // green
                                                    'rgba(239, 68, 68, 0.6)',   // red
                                                ],
                                                borderColor: [
                                                    'rgba(16, 185, 129, 1)',
                                                    'rgba(239, 68, 68, 1)',
                                                ],
                                                borderWidth: 1
                                            }]
                                        }}
                                        options={{
                                            responsive: true,
                                            maintainAspectRatio: false,
                                        }}
                                    />
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* Components Tab */}
                {activeTab === 'components' && (
                    <div className="space-y-6">
                        <div className="bg-gray-50 p-4 rounded-lg overflow-hidden">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Componente
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Imagens
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Tempo Médio
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Falhas
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Taxa de Sucesso
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">                                    {componentNames.map((component, i) => {
                                    const componentStats = stats.componentStats[component];
                                    const successRate = ((componentStats.count - componentStats.failures) / componentStats.count) * 100;

                                    return (
                                        <tr key={component}>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                {component}
                                            </td>                                                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {componentStats.count}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {componentStats.avgTime.toFixed(0)}ms
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {componentStats.failures}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <div className="flex items-center">
                                                    <div className="mr-2 h-2 w-16 bg-gray-200 rounded-full overflow-hidden">
                                                        <div
                                                            className={cn(
                                                                "h-full rounded-full",
                                                                successRate > 95 ? "bg-green-500" :
                                                                    successRate > 85 ? "bg-yellow-500" : "bg-red-500"
                                                            )}
                                                            style={{ width: `${successRate}%` }}
                                                        />
                                                    </div>
                                                    <span className="text-sm text-gray-500">{successRate.toFixed(1)}%</span>
                                                </div>
                                            </td>
                                        </tr>
                                    );
                                })}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}

                {/* Events Tab */}
                {activeTab === 'events' && (
                    <div className="space-y-6">
                        <h3 className="text-sm font-medium text-gray-500 mb-4">Eventos Recentes</h3>
                        <div className="bg-gray-50 p-4 rounded-lg overflow-x-auto">
                            <table className="min-w-full divide-y divide-gray-200">
                                <thead className="bg-gray-50">
                                    <tr>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Componente
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Status
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Tempo (ms)
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            Dimensões
                                        </th>
                                        <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                            URL
                                        </th>
                                    </tr>
                                </thead>
                                <tbody className="bg-white divide-y divide-gray-200">
                                    {stats.recentEvents.map((event, i) => (
                                        <tr key={i}>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                                {event.component}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap">
                                                <span className={cn(
                                                    "px-2 inline-flex text-xs leading-5 font-semibold rounded-full",
                                                    event.success
                                                        ? "bg-green-100 text-green-800"
                                                        : "bg-red-100 text-red-800"
                                                )}>
                                                    {event.success ? 'Sucesso' : 'Erro'}
                                                </span>
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {event.loadTime ? event.loadTime.toFixed(0) : '-'}
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                {event.imageWidth && event.imageHeight
                                                    ? `${event.imageWidth}×${event.imageHeight}`
                                                    : '-'
                                                }
                                            </td>
                                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <div className="max-w-xs truncate">
                                                    {event.url}
                                                </div>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    </div>
                )}
            </div>
        </div>
    );
}
