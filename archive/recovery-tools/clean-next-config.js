/**
 * Clean Next.js Configuration Generator
 * 
 * Creates a clean, optimized Next.js configuration without any of the
 * problematic patching that caused syntax errors or other issues.
 */

const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const writeFileAsync = promisify(fs.writeFile);
const copyFileAsync = promisify(fs.copyFile);

// Logger
const logger = {
  info: (msg) => console.log(`\x1b[34m[NextConfig] INFO: ${msg}\x1b[0m`),
  success: (msg) => console.log(`\x1b[32m[NextConfig] SUCCESS: ${msg}\x1b[0m`),
  warning: (msg) => console.log(`\x1b[33m[NextConfig] WARNING: ${msg}\x1b[0m`),
  error: (msg) => console.log(`\x1b[31m[NextConfig] ERROR: ${msg}\x1b[0m`),
};

// Path to Next.js config
const NEXT_CONFIG_PATH = path.join(process.cwd(), 'next.config.js');

/**
 * Generate a clean Next.js configuration
 */
async function generateCleanConfig() {
  logger.info('Generating clean Next.js configuration');
  
  // Backup existing config if it exists
  if (fs.existsSync(NEXT_CONFIG_PATH)) {
    const backupPath = `${NEXT_CONFIG_PATH}.backup-${Date.now()}`;
    await copyFileAsync(NEXT_CONFIG_PATH, backupPath);
    logger.info(`Backed up existing config to ${backupPath}`);
  }
  
  // Create clean config content
  const cleanConfigContent = `/**
 * Clean Next.js Configuration
 * Generated by recovery system on ${new Date().toISOString()}
 */

// Import safe polyfills - these are required early
require('./lib/ssr-safe-polyfill');

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  poweredByHeader: false,
  compress: true,
  
  // Experimental features
  experimental: {
    // Optimize package imports
    optimizePackageImports: ['lucide-react', 'date-fns'],
    
    // Server components external packages
    serverComponentsExternalPackages: [
      '@sanity/client',
      '@sanity/image-url', 
      'sharp',
    ],
  },

  // Required packages to transpile
  transpilePackages: ['styled-components'],

  // CSS-in-JS configuration
  compiler: {
    styledComponents: true,
  },

  // Build-time validations
  typescript: {
    ignoreBuildErrors: false,
  },
  
  eslint: {
    ignoreDuringBuilds: false,
  },

  // Image optimization
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'cdn.sanity.io',
        pathname: '/images/**',
      },
    ],
    formats: ['image/webp', 'image/avif'],
    deviceSizes: [360, 640, 1080, 1920],
    imageSizes: [16, 32, 64, 128],
  },

  // Security headers
  async headers() {
    return [
      {
        source: '/:path*',
        headers: [
          { key: 'X-Content-Type-Options', value: 'nosniff' },
          { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
        ],
      },
    ];
  },
  
  // Clean, simplified webpack configuration
  webpack: (config, { isServer, dev }) => {
    // Ensure proper webpack runtime configuration for dynamic imports
    if (!isServer) {
      config.output.chunkFilename = dev 
        ? 'static/chunks/[name].js'
        : 'static/chunks/[name]-[contenthash].js';
    }
    
    // Module resolution
    config.resolve = {
      ...config.resolve,
      fallback: {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: false,
        stream: false,
        buffer: false,
      },
      alias: {
        ...config.resolve.alias,
        'styled-components': require.resolve('styled-components'),
      },
    };

    // Sanity compatibility
    config.module.rules.push({
      test: /\\.m?js$/,
      include: /node_modules\\/(sanity|@sanity)/,
      resolve: {
        fullySpecified: false,
      },
    });

    // Suppress known warnings
    config.ignoreWarnings = [
      /Failed to parse source map/,
      /Module parse failed.*\\.js\\.map/,
    ];

    return config;
  },
};

module.exports = nextConfig;
`;

  // Write the clean config
  try {
    await writeFileAsync(NEXT_CONFIG_PATH, cleanConfigContent, 'utf8');
    logger.success(`Generated clean Next.js configuration at ${NEXT_CONFIG_PATH}`);
    return true;
  } catch (err) {
    logger.error(`Failed to write clean config: ${err.message}`);
    return false;
  }
}

// Run if this module is executed directly
if (require.main === module) {
  generateCleanConfig().catch(err => {
    console.error('Fatal error:', err);
    process.exit(1);
  });
}

// Export functionality
module.exports = {
  generateCleanConfig
};
