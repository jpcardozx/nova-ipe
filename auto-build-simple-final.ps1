# Auto Build Fix - Script Final Simplificado
# Script que roda build, captura m√≥dulos faltantes e instala automaticamente

Write-Host "üöÄ Iniciando Auto Build Fix - Vers√£o Final" -ForegroundColor Green

$maxAttempts = 10
$attempt = 1

while ($attempt -le $maxAttempts) {
    Write-Host "`nüîÑ Tentativa $attempt de $maxAttempts" -ForegroundColor Yellow
    Write-Host "‚öôÔ∏è  Executando build..." -ForegroundColor Cyan
    
    # Executar build e capturar sa√≠da
    $buildOutput = & pnpm build 2>&1 | Out-String
    
    # Verificar se build foi bem-sucedido
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ BUILD SUCESSO! Processo conclu√≠do com √™xito!" -ForegroundColor Green
        break
    }
    
    Write-Host "‚ùå Build falhou. Analisando erros..." -ForegroundColor Red
    
    # Capturar m√≥dulos faltantes
    $missingModules = @()
    
    # Pattern para capturar "Can't resolve 'module-name'"
    $buildOutput | Select-String "Can't resolve '([^']+)'" | ForEach-Object {
        $module = $_.Matches[0].Groups[1].Value
        if ($module -and $module -notmatch "^\./" -and $missingModules -notcontains $module) {
            $missingModules += $module
        }
    }
    
    # Pattern alternativo para outros tipos de erro de m√≥dulo
    $buildOutput | Select-String "Module not found.*'([^']+)'" | ForEach-Object {
        $module = $_.Matches[0].Groups[1].Value
        if ($module -and $module -notmatch "^\./" -and $missingModules -notcontains $module) {
            $missingModules += $module
        }
    }
    
    if ($missingModules.Count -eq 0) {
        Write-Host "‚ö†Ô∏è  Nenhum m√≥dulo faltante identificado. Erro pode ser de outro tipo." -ForegroundColor Yellow
        Write-Host "√öltimas linhas do erro:"
        $buildOutput -split "`n" | Select-Object -Last 10 | ForEach-Object { Write-Host $_ -ForegroundColor Red }
        break
    }
    
    # Remover duplicatas e m√≥dulos problem√°ticos
    $missingModules = $missingModules | Sort-Object -Unique | Where-Object {
        $_ -notmatch "^(\./|\.\.\/)" -and 
        $_ -notmatch "\.(js|ts|tsx|jsx|css|scss)$" -and
        $_ -ne ""
    }
    
    if ($missingModules.Count -eq 0) {
        Write-Host "‚ö†Ô∏è  Nenhum m√≥dulo v√°lido para instalar encontrado." -ForegroundColor Yellow
        break
    }
    
    Write-Host "üì¶ M√≥dulos faltantes encontrados:" -ForegroundColor Magenta
    $missingModules | ForEach-Object { Write-Host "  - $_" -ForegroundColor Yellow }
    
    # Instalar m√≥dulos em lote
    Write-Host "`nüì• Instalando m√≥dulos..." -ForegroundColor Cyan
    $moduleList = $missingModules -join " "
    
    try {
        & pnpm add $moduleList
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ M√≥dulos instalados com sucesso!" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Alguns m√≥dulos podem ter falhado na instala√ß√£o." -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Erro durante instala√ß√£o: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    $attempt++
    
    if ($attempt -le $maxAttempts) {
        Write-Host "‚è±Ô∏è  Aguardando 2 segundos antes da pr√≥xima tentativa..." -ForegroundColor Cyan
        Start-Sleep -Seconds 2
    }
}

if ($attempt -gt $maxAttempts) {
    Write-Host "`n‚ùå FALHA: M√°ximo de tentativas atingido. Build ainda apresenta erros." -ForegroundColor Red
    Write-Host "Pode ser necess√°rio interven√ß√£o manual." -ForegroundColor Yellow
} else {
    Write-Host "`nüéâ PROCESSO CONCLU√çDO COM SUCESSO!" -ForegroundColor Green
}
