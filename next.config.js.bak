/** @type {import('next').NextConfig} */
const path = require('path');

const nextConfig = {
  reactStrictMode: true,
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'cdn.sanity.io',
        pathname: '/images/**',
      },
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
      },
    ],
  },
  experimental: {
    optimizeCss: true,
    largePageDataBytes: 512 * 1000,
  },  // Configuração dos módulos de resolução de caminho
  webpack: (config, { isServer }) => {
    // CSS LOADER PATCH
    if (Array.isArray(config.module.rules)) {
      // Encontrar a regra do css
      const cssRule = config.module.rules.find(rule => 
        rule.test && rule.test.toString().includes('.css')
      );
      
      if (cssRule && cssRule.use) {
        // Ajusta o css-loader para usar o diretório correto do tailwindcss
        cssRule.use.forEach(loader => {
          if (typeof loader === 'object' && loader.loader === 'css-loader') {
            if (!loader.options) loader.options = {};
            if (!loader.options.importLoaders) loader.options.importLoaders = 1;
            
            // Adicionar postcss-loader explicitamente
            if (!cssRule.use.some(l => 
              (typeof l === 'object' && l.loader === 'postcss-loader') || 
              (typeof l === 'string' && l === 'postcss-loader')
            )) {
              cssRule.use.push({
                loader: 'postcss-loader',
                options: {
                  postcssOptions: {
                    plugins: [
                      require('tailwindcss'),
                      require('autoprefixer')
                    ]
                  }
                }
              });
            }
          }
        });
      }
    }
    
    // Ajusta a resolução de módulos para encontrar o tailwindcss
    if (!config.resolve) config.resolve = {};
    if (!config.resolve.alias) config.resolve.alias = {};
    
    config.resolve.alias['tailwindcss'] = path.resolve('./node_modules/tailwindcss');
    config.resolve.alias['postcss'] = path.resolve('./node_modules/postcss');
    config.resolve.alias['autoprefixer'] = path.resolve('./node_modules/autoprefixer');
    
    // Configuração original continua abaixo

    // Configuração adicional para resolver imports absolutos
    config.resolve.fallback = { fs: false, path: false };

    // Adiciona suporte para path aliases relativos (para resolução de módulos em build)
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.join(__dirname, './'),
      '@app': path.join(__dirname, './app'),
      '@components': path.join(__dirname, './app/components'),
      '@lib': path.join(__dirname, './lib'),
      '@src': path.join(__dirname, './src'),
      '@public': path.join(__dirname, './public'),
    };

    return config;
  },
  // Remove console logs em produção
  compiler: {
    removeConsole: process.env.NODE_ENV === 'production' ? { exclude: ['error', 'warn'] } : false,
  },
}

// Apenas adiciona Sentry em produção
if (process.env.NODE_ENV === 'production') {
  const { withSentryConfig } = require('@sentry/nextjs')
  module.exports = withSentryConfig(nextConfig, {
    silent: true,
    dryRun: false,
  })
} else {
  module.exports = nextConfig
}