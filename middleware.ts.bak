// middleware.ts
import { NextResponse } from "next/server"
import type { NextRequest } from "next/server"
import { getAdminSecret, verifyToken } from "@lib/auth"

export const runtime = "nodejs"
const AUTH_COOKIE_NAME = "admin-auth"
const STUDIO_PREFIX = "/studio"

// Cache control por rota
const CACHE_CONTROL_SETTINGS = {
  // Páginas de listagem - SHORT TTL para manter dados atualizados
  '/alugar': 'public, s-maxage=600, stale-while-revalidate=86400',
  '/comprar': 'public, s-maxage=600, stale-while-revalidate=86400',

  // Home page - medium TTL
  '/': 'public, s-maxage=1800, stale-while-revalidate=86400',

  // Imagens e assets estáticos - LONG TTL
  '/_next/image': 'public, max-age=31536000, immutable',
  '/_next/static': 'public, max-age=31536000, immutable',
  '/images': 'public, max-age=31536000, stale-while-revalidate=86400',

  // API routes - no cache por padrão
  '/api/': 'no-store, no-cache, must-revalidate, proxy-revalidate',
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl
  const response = NextResponse.next();

  // Adicionar headers de cache control baseado na rota
  for (const [path, cacheValue] of Object.entries(CACHE_CONTROL_SETTINGS)) {
    if (pathname.startsWith(path)) {
      response.headers.set('Cache-Control', cacheValue);
      break;
    }
  }

  // Adiciona headers de performance
  response.headers.set('X-DNS-Prefetch-Control', 'on');
  response.headers.set('X-XSS-Protection', '1; mode=block');

  // Passa arquivos estáticos, API e _next
  if (!pathname.startsWith(STUDIO_PREFIX)) {
    return response;
  }
  if (
    pathname.startsWith(`${STUDIO_PREFIX}/_next`) ||
    pathname.startsWith(`${STUDIO_PREFIX}/static`)
  ) {
    return NextResponse.next()
  }

  const token = request.cookies.get(AUTH_COOKIE_NAME)?.value
  // Verifica HMAC via Web Crypto API
  if (token && await verifyToken(token, getAdminSecret())) {
    return NextResponse.next()
  }

  // Redireciona para acesso negado
  return NextResponse.rewrite(new URL("/acesso-negado", request.url))
}

export const config = {
  matcher: ["/studio/:path*"],
}
